var store = [{
        "title": "Post: Modified Date",
        "excerpt":"This post has been updated and should show a modified date if used in a layout.   All children, except one, grow up. They soon know that they will grow up, and the way Wendy knew was this. One day when she was two years old she was playing in a garden, and she plucked another flower and ran with it to her mother. I suppose she must have looked rather delightful, for Mrs. Darling put her hand to her heart and cried, “Oh, why can’t you remain like this for ever!” This was all that passed between them on the subject, but henceforth Wendy knew that she must grow up. You always know after you are two. Two is the beginning of the end.  ","categories": ["Blog"],
        "tags": ["Jekyll"],
        "url": "/jekyll-blog/blog/post-modified/",
        "teaser": "/jekyll-blog/assets/images/tease.jpg"
      },{
        "title": "Post: Standard",
        "excerpt":"All children, except one, grow up. They soon know that they will grow up, and the way Wendy knew was this. One day when she was two years old she was playing in a garden, and she plucked another flower and ran with it to her mother. I suppose she must have looked rather delightful, for Mrs. Darling put her hand to her heart and cried, “Oh, why can’t you remain like this for ever!” This was all that passed between them on the subject, but henceforth Wendy knew that she must grow up. You always know after you are two. Two is the beginning of the end.   Mrs. Darling first heard of Peter when she was tidying up her children’s minds. It is the nightly custom of every good mother after her children are asleep to rummage in their minds and put things straight for next morning, repacking into their proper places the many articles that have wandered during the day.     This post has a manual excerpt &lt;!--more--&gt; set after the second paragraph. The following YAML Front Matter has also be applied:   excerpt_separator: \"&lt;!--more--&gt;\"   If you could keep awake (but of course you can’t) you would see your own mother doing this, and you would find it very interesting to watch her. It is quite like tidying up drawers. You would see her on her knees, I expect, lingering humorously over some of your contents, wondering where on earth you had picked this thing up, making discoveries sweet and not so sweet, pressing this to her cheek as if it were as nice as a kitten, and hurriedly stowing that out of sight. When you wake in the morning, the naughtiness and evil passions with which you went to bed have been folded up small and placed at the bottom of your mind and on the top, beautifully aired, are spread out your prettier thoughts, ready for you to put on.   I don’t know whether you have ever seen a map of a person’s mind. Doctors sometimes draw maps of other parts of you, and your own map can become intensely interesting, but catch them trying to draw a map of a child’s mind, which is not only confused, but keeps going round all the time. There are zigzag lines on it, just like your temperature on a card, and these are probably roads in the island, for the Neverland is always more or less an island, with astonishing splashes of colour here and there, and coral reefs and rakish-looking craft in the offing, and savages and lonely lairs, and gnomes who are mostly tailors, and caves through which a river runs, and princes with six elder brothers, and a hut fast going to decay, and one very small old lady with a hooked nose. It would be an easy map if that were all, but there is also first day at school, religion, fathers, the round pond, needle-work, murders, hangings, verbs that take the dative, chocolate pudding day, getting into braces, say ninety-nine, three-pence for pulling out your tooth yourself, and so on, and either these are part of the island or they are another map showing through, and it is all rather confusing, especially as nothing will stand still.   Of course the Neverlands vary a good deal. John’s, for instance, had a lagoon with flamingoes flying over it at which John was shooting, while Michael, who was very small, had a flamingo with lagoons flying over it. John lived in a boat turned upside down on the sands, Michael in a wigwam, Wendy in a house of leaves deftly sewn together. John had no friends, Michael had friends at night, Wendy had a pet wolf forsaken by its parents, but on the whole the Neverlands have a family resemblance, and if they stood still in a row you could say of them that they have each other’s nose, and so forth. On these magic shores children at play are for ever beaching their coracles [simple boat]. We too have been there; we can still hear the sound of the surf, though we shall land no more.   Of all delectable islands the Neverland is the snuggest and most compact, not large and sprawly, you know, with tedious distances between one adventure and another, but nicely crammed. When you play at it by day with the chairs and table-cloth, it is not in the least alarming, but in the two minutes before you go to sleep it becomes very real. That is why there are night-lights.   Occasionally in her travels through her children’s minds Mrs. Darling found things she could not understand, and of these quite the most perplexing was the word Peter. She knew of no Peter, and yet he was here and there in John and Michael’s minds, while Wendy’s began to be scrawled all over with him. The name stood out in bolder letters than any of the other words, and as Mrs. Darling gazed she felt that it had an oddly cocky appearance.  ","categories": ["Blog"],
        "tags": ["Jekyll"],
        "url": "/jekyll-blog/blog/post-standard/",
        "teaser": "/jekyll-blog/assets/images/tease.jpg"
      },{
        "title": "Post: Chat",
        "excerpt":"Abbott: Strange as it may seem, they give ball players nowadays very peculiar names.   Costello: Funny names?   Abbott: Nicknames, nicknames. Now, on the St. Louis team we have Who’s on first, What’s on second, I Don’t Know is on third–   Costello: That’s what I want to find out. I want you to tell me the names of the fellows on the St. Louis team.   Abbott: I’m telling you. Who’s on first, What’s on second, I Don’t Know is on third–   Costello: You know the fellows’ names?   Abbott: Yes.   Costello: Well, then who’s playing first?   Abbott: Yes.   Costello: I mean the fellow’s name on first base.   Abbott: Who.   Costello: The fellow playin’ first base.   Abbott: Who.   Costello: The guy on first base.   Abbott: Who is on first.   Costello: Well, what are you askin’ me for?   Abbott: I’m not asking you–I’m telling you. Who is on first.   Costello: I’m asking you–who’s on first?   Abbott: That’s the man’s name.   Costello: That’s who’s name?   Abbott: Yes.   Costello: When you pay off the first baseman every month, who gets the money?   Abbott: Every dollar of it. And why not, the man’s entitled to it.   Costello: Who is?   Abbott: Yes.   Costello: So who gets it?   Abbott: Why shouldn’t he? Sometimes his wife comes down and collects it.   Costello: Who’s wife?   Abbott: Yes. After all, the man earns it.   Costello: Who does?   Abbott: Absolutely.   Costello: Well, all I’m trying to find out is what’s the guy’s name on first base?   Abbott: Oh, no, no. What is on second base.   Costello: I’m not asking you who’s on second.   Abbott: Who’s on first!   Costello: St. Louis has a good outfield?   Abbott: Oh, absolutely.   Costello: The left fielder’s name?   Abbott: Why.   Costello: I don’t know, I just thought I’d ask.   Abbott: Well, I just thought I’d tell you.   Costello: Then tell me who’s playing left field?   Abbott: Who’s playing first.   Costello: Stay out of the infield! The left fielder’s name?   Abbott: Why.   Costello: Because.   Abbott: Oh, he’s center field.   Costello: Wait a minute. You got a pitcher on this team?   Abbott: Wouldn’t this be a fine team without a pitcher?   Costello: Tell me the pitcher’s name.   Abbott: Tomorrow.   Costello: Now, when the guy at bat bunts the ball–me being a good catcher–I want to throw the guy out at first base, so I pick up the ball and throw it to who?   Abbott: Now, that’s he first thing you’ve said right.   Costello: I DON’T EVEN KNOW WHAT I’M TALKING ABOUT!   Abbott: Don’t get excited. Take it easy.   Costello: I throw the ball to first base, whoever it is grabs the ball, so the guy runs to second. Who picks up the ball and throws it to what. What throws it to I don’t know. I don’t know throws it back to tomorrow–a triple play.   Abbott: Yeah, it could be.   Costello: Another guy gets up and it’s a long ball to center.   Abbott: Because.   Costello: Why? I don’t know. And I don’t care.   Abbott: What was that?   Costello: I said, I DON’T CARE!   Abbott: Oh, that’s our shortstop!  ","categories": ["Blog"],
        "tags": ["Jekyll"],
        "url": "/jekyll-blog/blog/post-chat/",
        "teaser": "/jekyll-blog/assets/images/tease.jpg"
      },{
        "title": "Post: Notice",
        "excerpt":"A notice displays information that explains nearby content. Often used to call attention to a particular detail.   When using Kramdown {: .notice} can be added after a sentence to assign the .notice to the &lt;p&gt;&lt;/p&gt; element.   Changes in Service: We just updated our privacy policy here to better service our customers. We recommend reviewing the changes.   Primary Notice: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio. Praesent libero. Sed cursus ante dapibus diam. Sed nisi. Nulla quis sem at nibh elementum imperdiet.   Info Notice: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio. Praesent libero. Sed cursus ante dapibus diam. Sed nisi. Nulla quis sem at nibh elementum imperdiet.   Warning Notice: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio. Praesent libero. Sed cursus ante dapibus diam. Sed nisi. Nulla quis sem at nibh elementum imperdiet.   Danger Notice: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio. Praesent libero. Sed cursus ante dapibus diam. Sed nisi. Nulla quis sem at nibh elementum imperdiet.   Success Notice: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio. Praesent libero. Sed cursus ante dapibus diam. Sed nisi. Nulla quis sem at nibh elementum imperdiet.   Want to wrap several paragraphs or other elements in a notice? Using Liquid to capture the content and then filter it with markdownify is a good way to go.   {% capture notice-2 %} #### New Site Features  * You can now have cover images on blog pages * Drafts will now auto-save while writing {% endcapture %}  &lt;div class=\"notice\"&gt;{{ notice-2 | markdownify }}&lt;/div&gt;       New Site Features      You can now have cover images on blog pages   Drafts will now auto-save while writing     Or you could skip the capture and stick with straight HTML.   &lt;div class=\"notice\"&gt;   &lt;h4&gt;Message&lt;/h4&gt;   &lt;p&gt;A basic message.&lt;/p&gt; &lt;/div&gt;      Message    A basic message.   ","categories": ["Blog"],
        "tags": ["Jekyll"],
        "url": "/jekyll-blog/blog/post-notice/",
        "teaser": "/jekyll-blog/assets/images/tease.jpg"
      },{
        "title": "Post: Quote",
        "excerpt":"   Only one thing is impossible for God: To find any sense in any copyright law on the planet.       Mark Twain   ","categories": ["Blog"],
        "tags": ["Jekyll"],
        "url": "/jekyll-blog/blog/post-quote/",
        "teaser": "/jekyll-blog/assets/images/tease.jpg"
      },{
        "title": "Post: Link",
        "excerpt":"This theme supports link posts, made famous by John Gruber. To use, just add link: http://url-you-want-linked to the post’s YAML front matter and you’re done.      And this is how a quote looks.    Some link can also be shown.  ","categories": ["Blog"],
        "tags": ["Jekyll"],
        "url": "/jekyll-blog/blog/post-link/",
        "teaser": "/jekyll-blog/assets/images/tease.jpg"
      },{
        "title": "Post: Twitter Embed",
        "excerpt":"🎨 我的微博 November 6, 2015&lt;/blockquote&gt;   This post tests Twitter Embeds.   ","categories": ["Blog"],
        "tags": ["Jekyll"],
        "url": "/jekyll-blog/blog/%E5%90%8C%E6%AD%A5twitter/",
        "teaser": "/jekyll-blog/assets/images/tease.jpg"
      },{
        "title": "Layout: Post with Nested Table of Contents via Helper",
        "excerpt":"Tests table of contents with multiple levels to verify indentation is readible via helper include (deprecated).   {% include toc %}          目录     Enim laboris id ea elit elit deserunt           2 Sit adipisicing tempor duis velit cupidatat occaecat do amet                   2.1 Ex et quis exercitation fugiat excepteur eiusmod mollit consequat id pariatur non adipisicing magna tempor                           2.1.1 Ut nostrud reprehenderit proident culpa enim irure cupidatat sunt ex ea minim nostrud               2.1.2 Nisi non nisi ullamco ipsum cillum               2.1.3 Ut pariatur do do eiusmod consequat do pariatur nisi ex anim reprehenderit nostrud                                   2.1.1.1 Ut aute quis ipsum fugiat dolor                   2.1.1.2 Consequat nostrud quis officia et aliquip quis magna mollit veniam                                           2.1.1.1.1 Id cillum proident labore occaecat reprehenderit excepteur fugiat est                       2.1.1.1.2 In consectetur ea qui quis culpa nulla                       2.1.1.1.3 Culpa magna pariatur magna officia adipisicing ex minim ea do est                       2.1.1.1.4 Veniam ipsum non reprehenderit pariatur                                                           2.1.1.3 Ut qui labore officia ad laboris eu amet minim tempor qui cupidatat duis aute                   2.1.1.4 Magna ipsum nisi velit anim                                           2.1.1.4.1 Mollit nulla est tempor fugiat occaecat nostrud                       2.1.1.2.1 Culpa aliquip irure et nostrud esse consequat fugiat dolor                                                                                       2.1.4 Laboris exercitation nisi tempor dolore                                   2.2 Officia irure duis et est sunt                       3 Laborum eu magna proident proident tempor                   3.1 Amet enim do laboris ipsum aliqua eiusmod non eu           3.2 Do exercitation ex elit incididunt sit cupidatat           3.3 Officia aliquip fugiat ex pariatur nisi et nostrud adipisicing eu minim laboris eiusmod ea sunt           3.4 Ipsum velit laborum est nostrud qui enim ullamco velit dolor Lorem magna           3.5 Officia fugiat fugiat voluptate ullamco eiusmod duis minim aliqua consequat consectetur qui do sunt fugiat                           3.5.1 Mollit laborum ea aliquip mollit quis commodo fugiat tempor deserunt exercitation sint culpa ipsum tempor                                   3.5.1.1 Nisi anim commodo consequat quis amet                                           3.5.1.1.1 Culpa nulla Lorem adipisicing ut sit cupidatat laborum laborum cupidatat proident                                                                                                           3.6 Reprehenderit culpa consectetur veniam minim cillum in nostrud                       4 Laboris aute consequat id eu et Lorem amet       5 Esse eu consequat consequat aliqua fugiat nulla ad labore consectetur eu pariatur nisi aute       6 Aliquip sunt laborum excepteur cupidatat officia ad tempor veniam esse amet ea commodo sunt                Enim laboris id ea elit elit deserunt   Magna incididunt elit id enim nisi quis excepteur reprehenderit Lorem dolore dolore ad enim. Labore esse elit excepteur et elit dolor. Elit ut consectetur labore velit elit esse voluptate id commodo. Magna cillum officia consequat non occaecat mollit esse nisi quis.   Nostrud veniam excepteur commodo enim pariatur velit est. Dolor consequat elit occaecat enim veniam ullamco qui est anim ex elit. Est minim aute magna laborum reprehenderit magna reprehenderit ullamco voluptate id sit aliqua. Id labore veniam ad duis aliquip commodo qui ex ut ipsum irure. In et sit ea cupidatat consectetur in nisi amet in cupidatat excepteur commodo amet.   2 Sit adipisicing tempor duis velit cupidatat occaecat do amet   Ad non dolore irure in. In do ut nostrud reprehenderit consequat aliqua sunt culpa voluptate amet minim ea. Eu dolore deserunt consectetur eu in minim sit nulla id id est amet consectetur. Tempor dolore ipsum magna amet velit aliquip ea anim non eu Lorem deserunt. Irure excepteur id adipisicing elit dolor ipsum eiusmod non nulla nisi sint qui et. Occaecat pariatur tempor ex nisi pariatur.   Proident culpa nostrud id est qui fugiat duis aute. Cillum commodo pariatur nostrud culpa Lorem exercitation non. Consequat elit deserunt dolore voluptate sunt labore minim ut consequat minim.   Sunt pariatur in ex non nulla proident ex ullamco Lorem do ipsum. Cillum est mollit reprehenderit excepteur labore labore elit dolore adipisicing ad quis quis aliqua sunt. Proident amet est reprehenderit deserunt amet cupidatat incididunt irure est elit.   2.1 Ex et quis exercitation fugiat excepteur eiusmod mollit consequat id pariatur non adipisicing magna tempor   Nostrud sunt nostrud incididunt adipisicing officia esse minim irure duis dolore adipisicing cupidatat. Eu non labore veniam ad sunt pariatur qui. Irure reprehenderit qui elit duis cillum sit officia consectetur sint deserunt do aute velit. Do id occaecat magna occaecat reprehenderit veniam pariatur Lorem. Officia sit cupidatat adipisicing laborum.   2.1.1 Ut nostrud reprehenderit proident culpa enim irure cupidatat sunt ex ea minim nostrud   Laborum laboris et ut proident sit qui pariatur nisi commodo. Deserunt eiusmod eiusmod elit anim exercitation quis. Anim laboris irure minim elit fugiat velit esse officia amet reprehenderit id. Dolor eiusmod incididunt excepteur sint aute qui esse nostrud. Nisi qui adipisicing consectetur enim pariatur sint veniam esse.   2.1.2 Nisi non nisi ullamco ipsum cillum  Minim officia tempor eiusmod sint magna reprehenderit do amet ex velit. Irure nulla ut veniam eu veniam proident esse pariatur cillum. Esse anim et proident cillum esse magna sint.   2.1.3 Ut pariatur do do eiusmod consequat do pariatur nisi ex anim reprehenderit nostrud  Reprehenderit consectetur tempor labore dolore ad. Ullamco qui sunt quis deserunt id ipsum sit qui nisi esse deserunt ad exercitation. Dolore qui in mollit ex qui minim et ipsum reprehenderit. Tempor magna ipsum proident voluptate mollit quis consectetur veniam non aliquip cupidatat nisi culpa aute.   2.1.1.1 Ut aute quis ipsum fugiat dolor  Occaecat excepteur et ea et exercitation ad aute minim incididunt incididunt aute sint officia aliquip. Quis cupidatat nostrud dolor consequat laboris eu ullamco qui esse excepteur aute. Veniam ut ipsum aute Lorem proident minim ea fugiat Lorem cillum. Qui esse id minim consequat ullamco aliqua pariatur ea mollit. Minim ea ipsum laborum consequat esse mollit pariatur. Voluptate sit voluptate non ut consectetur irure laboris ex adipisicing dolore elit aliquip velit. In eu veniam voluptate incididunt aute eu reprehenderit ut id voluptate.   2.1.1.2 Consequat nostrud quis officia et aliquip quis magna mollit veniam  Magna duis exercitation dolor amet. Ea irure laborum sit officia reprehenderit enim aute magna duis. Elit fugiat ut proident sit.   2.1.1.1.1 Id cillum proident labore occaecat reprehenderit excepteur fugiat est   Irure qui veniam incididunt irure consequat mollit consectetur est nostrud deserunt eiusmod nostrud quis. Eiusmod id proident eu aute exercitation irure consectetur sit dolor dolor in esse. Qui eu dolor ea est magna amet laborum qui irure. Reprehenderit excepteur voluptate fugiat exercitation voluptate laboris nostrud qui magna et officia.   2.1.1.1.2 In consectetur ea qui quis culpa nulla   Ad quis duis dolore voluptate laborum eiusmod consequat sint. Cupidatat officia ex laborum ad non mollit excepteur ea. Nostrud elit in consequat sunt adipisicing reprehenderit ipsum proident irure. Sint velit laborum sint laboris ea. Veniam occaecat et in Lorem proident minim deserunt labore laborum reprehenderit. Consequat laborum deserunt culpa consectetur. Incididunt reprehenderit amet esse duis dolore pariatur adipisicing quis elit.   2.1.1.1.3 Culpa magna pariatur magna officia adipisicing ex minim ea do est   Dolore reprehenderit aute ex id. Ipsum laboris sit quis enim labore ut sint cillum exercitation. Commodo aliqua exercitation enim sunt velit do laborum mollit irure dolor.   2.1.1.1.4 Veniam ipsum non reprehenderit pariatur   Laboris amet quis sunt id dolor consectetur Lorem id aliquip laboris fugiat. Non ex magna deserunt veniam eiusmod. Irure culpa culpa dolore pariatur. Elit enim deserunt ut amet adipisicing elit laborum exercitation cupidatat et. Aliqua aliqua laborum exercitation commodo reprehenderit reprehenderit amet laboris ea ea ex amet in. Aute minim voluptate et ipsum culpa consequat.   2.1.1.3 Ut qui labore officia ad laboris eu amet minim tempor qui cupidatat duis aute   In in dolore laboris irure est consequat magna ea non aute cupidatat tempor. Officia sit pariatur consequat laborum aliqua nulla anim nisi aliquip reprehenderit consequat. Ad duis labore minim consequat reprehenderit labore ex minim cillum magna incididunt adipisicing dolor. Non velit mollit minim consectetur minim. Cillum elit et amet est reprehenderit non. Elit adipisicing nostrud ea veniam occaecat commodo deserunt.   2.1.1.4 Magna ipsum nisi velit anim   Eiusmod tempor dolor proident pariatur consequat sit non nostrud. Eiusmod duis elit esse Lorem dolore et minim elit consectetur eu ullamco. Adipisicing sunt excepteur eu mollit in nostrud.   2.1.1.4.1 Mollit nulla est tempor fugiat occaecat nostrud   Exercitation eu labore Lorem culpa id enim ut officia aute proident in est irure. Nostrud adipisicing magna elit tempor ipsum culpa in incididunt consectetur incididunt veniam aute tempor sint. Officia est consectetur sint sint nostrud proident mollit. Dolore duis proident mollit consectetur tempor.   2.1.1.2.1 Culpa aliquip irure et nostrud esse consequat fugiat dolor   Ad ut commodo elit amet officia ipsum labore do amet. Eiusmod sint irure magna proident nisi adipisicing mollit excepteur mollit proident culpa duis. Est reprehenderit consequat eiusmod deserunt duis ipsum esse amet incididunt.   2.1.4 Laboris exercitation nisi tempor dolore   Elit culpa est eiusmod nostrud occaecat. Labore incididunt nostrud consectetur sint. Ut pariatur laborum incididunt culpa proident incididunt veniam veniam laboris adipisicing mollit. Ullamco magna tempor fugiat veniam in ipsum nisi mollit labore amet et sit quis. In consectetur fugiat Lorem culpa veniam minim. Irure aliqua est mollit consectetur id Lorem velit minim sit velit. Eiusmod magna do dolor est id reprehenderit minim fugiat minim incididunt incididunt laboris velit consequat.   2.2 Officia irure duis et est sunt   Consequat anim quis non nulla. Eiusmod pariatur sunt non culpa culpa ipsum nulla anim in. Non ad exercitation ut reprehenderit ut dolor laborum tempor ad qui magna fugiat irure. Sint commodo ea sint sunt. Irure qui pariatur tempor veniam reprehenderit amet est. Amet laboris proident Lorem deserunt proident duis esse do sit eu dolor qui duis eu. Mollit laboris nisi aute nulla consectetur exercitation nulla aliqua anim.   3 Laborum eu magna proident proident tempor   Occaecat aliqua id voluptate mollit aliquip. Elit excepteur magna esse commodo pariatur reprehenderit in in quis. Id dolore proident proident mollit tempor duis magna ullamco nulla velit consequat. In ut est aliquip in commodo ullamco sit sint.   3.1 Amet enim do laboris ipsum aliqua eiusmod non eu   Laborum magna deserunt do anim quis proident adipisicing. Dolore qui ex minim reprehenderit. Consectetur in cillum ad dolore ut id deserunt irure aute sint magna dolore adipisicing.   3.2 Do exercitation ex elit incididunt sit cupidatat   Excepteur aliqua nisi ullamco sunt fugiat laborum elit aliquip officia culpa. Est exercitation enim laborum amet exercitation. Eu quis qui eiusmod incididunt id do aliquip nostrud do esse enim excepteur enim pariatur. Aute adipisicing velit non culpa quis exercitation. Quis cupidatat anim occaecat Lorem ad mollit aute eiusmod quis dolor duis. Proident anim et nostrud ut aliquip irure adipisicing reprehenderit proident dolore magna. Consequat eu fugiat esse proident duis eu proident fugiat laboris ea veniam nisi reprehenderit.   3.3 Officia aliquip fugiat ex pariatur nisi et nostrud adipisicing eu minim laboris eiusmod ea sunt   Consectetur irure elit nulla elit non officia. Culpa Lorem minim dolor laboris enim labore do minim laborum. Fugiat deserunt nisi ut do incididunt incididunt ea anim exercitation sit duis. Irure esse pariatur labore enim labore qui anim culpa laborum velit consequat. Culpa in adipisicing excepteur est ipsum. In reprehenderit eiusmod ad ad non.   3.4 Ipsum velit laborum est nostrud qui enim ullamco velit dolor Lorem magna   Nulla magna dolor minim commodo. Sunt nulla cupidatat consequat eiusmod elit irure eiusmod excepteur. Sit incididunt irure minim magna. Tempor ipsum exercitation minim sunt labore dolor ullamco veniam enim nisi veniam adipisicing occaecat proident.   3.5 Officia fugiat fugiat voluptate ullamco eiusmod duis minim aliqua consequat consectetur qui do sunt fugiat   Non aute culpa irure qui aute adipisicing aute id commodo id. Laborum ullamco laboris velit in quis duis ut consequat do minim. In minim amet ut reprehenderit et voluptate. In quis Lorem occaecat nostrud excepteur nostrud dolore in nulla ad Lorem nisi. Dolor exercitation Lorem qui sint aute ipsum officia eiusmod aliquip Lorem sit. Reprehenderit ex veniam excepteur laboris magna dolore fugiat sit exercitation esse et consequat in sit. Incididunt pariatur ad esse anim aute do id eu.   3.5.1 Mollit laborum ea aliquip mollit quis commodo fugiat tempor deserunt exercitation sint culpa ipsum tempor   Est cillum laborum cupidatat ullamco cupidatat magna laborum enim duis consequat est eu. Magna cillum Lorem proident non ut officia. Esse irure et laboris eu occaecat aute.   3.5.1.1 Nisi anim commodo consequat quis amet   Sunt eu dolor enim enim consectetur et anim irure dolor velit cillum. Esse reprehenderit cillum incididunt adipisicing amet nostrud adipisicing. Minim mollit nostrud ipsum ea ut sit ex elit. Do esse ad et ipsum nisi sint anim culpa excepteur ipsum. Commodo nisi irure qui reprehenderit incididunt.   3.5.1.1.1 Culpa nulla Lorem adipisicing ut sit cupidatat laborum laborum cupidatat proident   Dolore dolor sit sunt anim eu amet consectetur quis ea proident ex aliqua. Sunt laborum consectetur consectetur enim velit eiusmod labore commodo commodo laboris deserunt. Eiusmod enim do amet laborum commodo qui.   3.6 Reprehenderit culpa consectetur veniam minim cillum in nostrud   Lorem dolore sit aliqua tempor do voluptate ut esse. Minim velit ad velit commodo minim laborum. Qui qui reprehenderit non proident ullamco veniam aliquip.   4 Laboris aute consequat id eu et Lorem amet   Ad qui voluptate dolor veniam. Veniam mollit aute eiusmod eu labore incididunt sint proident. Non minim consequat anim sint. Aliquip non nisi nostrud proident. Eiusmod ut duis commodo sunt laboris irure eu. Laboris quis amet ad qui officia.   5 Esse eu consequat consequat aliqua fugiat nulla ad labore consectetur eu pariatur nisi aute   Duis proident ullamco fugiat aliqua sunt anim ea do irure est amet quis nulla cillum. Commodo voluptate dolor culpa sint aliquip voluptate exercitation anim cillum ad eu in amet. Sint fugiat qui commodo quis ex eu commodo officia aliquip irure. Non dolore elit excepteur id laboris irure consequat magna consectetur. Qui proident deserunt culpa tempor sit aute velit proident cillum ea.   6 Aliquip sunt laborum excepteur cupidatat officia ad tempor veniam esse amet ea commodo sunt   Ex minim pariatur est nisi exercitation exercitation reprehenderit id aliqua deserunt est. Laborum ullamco do ipsum minim ipsum aliquip voluptate voluptate aliqua. Magna proident velit veniam et minim commodo officia officia mollit nisi. Excepteur occaecat deserunt irure adipisicing minim adipisicing cupidatat non anim exercitation ex. Amet quis sunt sint veniam non id nisi ipsum mollit voluptate quis tempor tempor.  ","categories": [],
        "tags": ["Jekyll"],
        "url": "/jekyll-blog/%E6%96%87%E6%A1%A3%E6%A8%A1%E6%9D%BF/",
        "teaser": "/jekyll-blog/assets/images/tease.jpg"
      },{
        "title": "Welcome to Jekyll!",
        "excerpt":"You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.   To add new posts, simply add a file in the _posts directory that follows the convention YYYY-MM-DD-name-of-post.ext and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.   Jekyll also offers powerful support for code snippets:   def print_hi(name)   puts \"Hi, #{name}\" end print_hi('Tom') #=&gt; prints 'Hi, Tom' to STDOUT.   Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll Talk.   ","categories": ["blog"],
        "tags": ["Jekyll"],
        "url": "/jekyll-blog/blog/welcome-to-jekyll/",
        "teaser": "/jekyll-blog/assets/images/tease.jpg"
      },{
        "title": "武汉小米面试八股文",
        "excerpt":"武汉小米面试题          目录     Object await。notify。区别，直接可以用await吗？   hashcode 和equals 区别，有什么作用?   线程池运行原理   多线程同步的几种方式   maven的生命周期   开闭原则解锁一下   单一指责解释一下   hashmap 怎么根据key取得值，说一下流程   CAS 聊一下   git 和 svn 什么区别？   Http协议        Object await。notify。区别，直接可以用await吗？   wait() - 方法wait()的作用是使当前执行代码的线程进行等待，它是Object类的方法，该方法用来将当前线程置入预执行队列中，并且在wait所在的代码行处停止执行，直到接到通知或被中断为止。在调用wait方法之前，线程必须获得该对象的对象级别锁，即只能在同步方法或同步块中调用wait方法。   notify() - 同wait方法一样，也需要在同步方法或同步块中调用，即在调用前，线程也必须获得该对象的对象级别锁。 wait和notify调用时，如果没有持有适当的锁，将会抛出IllegalMonitorStateException的异常。它是一个RuntimeException的子类。   hashcode 和equals 区别，有什么作用?      equal()相等的两个对象他们的hashCode()肯定相等，也就是用equal()对比是绝对可靠的。   hashCode()相等的两个对象他们的equal()不一定相等，也就是hashCode()不是绝对可靠的。   一致性，即：当两个对象 equals 比较为 true，那么 hashcode 值应当相等，反之亦然，因为当两个对象hashcode 值相等，但是 equals 比较为 false，那么在 HashMap 中会产生链表，影响查询性能。   成对重写，即重写 equals 就应当重写 hashcode。实际上这只是一条规范，如果不这样做程序也可以执行，只不过会隐藏bug。一般一个类的对象如果会存储在HashTable，HashSet,HashMap等散列存储结构中，那么重写equals后最好也重写hashCode，否则会导致存储数据的不唯一性（存储了两个equals相等的数据）,因为map结构中的key可以是对象，两个对象的值相同但地址不同，则取出value会出现问题。而如果确定不会存储在这些散列结构中，则可以不重写hashCode。   线程池运行原理   首先线程池有几个核心的参数概念：      最大线程数maximumPoolSize   核心线程数corePoolSize   活跃时间keepAliveTime   阻塞队列workQueue   拒绝策略RejectedExecutionHandler   当提交一个新任务到线程池时，具体的执行流程如下：      当我们提交任务，线程池会根据corePoolSize大小创建若干任务数量线程执行任务   当任务的数量超过corePoolSize数量，后续的任务将会进入阻塞队列阻塞排队   当阻塞队列也满了之后，那么将会继续创建(maximumPoolSize-corePoolSize)个数量的线程来执行任务，如果任务处理完成，maximumPoolSize-corePoolSize额外创建的线程等待keepAliveTime之后被自动销毁   如果达到maximumPoolSize，阻塞队列还是满的状态，那么将根据不同的拒绝策略对应处理.   多线程同步的几种方式      参考: https://blog.csdn.net/yoonerloop/article/details/81154596       通过Object的wait和notify   通过Condition的awiat和signal   通过一个阻塞队列   通过两个阻塞队列   通过SynchronousQueue   通过线程池的Callback回调   通过同步辅助类CountDownLatch   通过同步辅助类CyclicBarrier   maven的生命周期   Maven的生命周期就是对所有的构建过程进行抽象和统一。包含了项目的清理、初始化、编译、测试、打包、集成测试、验证、部署和站点生成等几乎所有的构建步骤。 Maven的生命周期是抽象的，即生命周期不做任何实际的工作，实际任务由插件完成，类似于设计模式中的模板方法。 clean、validate、complie、test、package、verify、install、site、deploy 主要把这个流程说清楚我觉得也挺好的了   开闭原则解锁一下   开闭原则就是说对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。   单一指责解释一下   单一性原则一般指设计接口时，接口的功能单一不可分。目的还是提高接口的通用性，做到实现一个接口，其方法尽量都可以用的到。 单一职责原则规定一个类应该有且仅有一个引起它变化的原因，否则类应该被拆分。 在实际应用中，类的设计尽量做到只有一个原因引起变化，接口一定要做到单一职责原则，方法一定要做到单一职责原则，即一个方法只实现一个功能。 模板设计模式说一下 一个抽象类中，有一个主方法，再定义1…n个方法，可以是抽象的，也可以是实际的方法，定义一个类，继承该抽象类，重写抽象方法，通过调用抽象类，实现对子类的调用。 应用场景，抽象的上传文件接口，定义一个抽象的获取图片接口的地址，根据子类具体的实现获取不同上传地址。   hashmap 怎么根据key取得值，说一下流程   HashMap主要由数组和链表组成，他不是线程安全的。核心的点就是put插入数据的过程，get查询数据以及扩容的方式。JDK1.7和1.8的主要区别在于头插和尾插方式的修改，头插容易导致HashMap链表死循环，并且1.8之后加入红黑树对性能有提升。   put插入数据流程   往map插入元素的时候首先通过对key hash然后与数组长度-1进行与运算((n-1)&amp;hash)，都是2的次幂所以等同于取模，但是位运算的效率更高。找到数组中的位置之后，如果数组中没有元素直接存入，反之则判断key是否相同，key相同就覆盖，否则就会插入到链表的尾部，如果链表的长度超过8，则会转换成红黑树，最后判断数组长度是否超过默认的长度*负载因子也就是12，超过则进行扩容。   get查询数据   查询数据相对来说就比较简单了，首先计算出hash值，然后去数组查询，是红黑树就去红黑树查，链表就遍历链表查询就可以了。   resize扩容过程   扩容的过程就是对key重新计算hash，然后把数据拷贝到新的数组。   CAS 聊一下   CAS叫做CompareAndSwap，比较并交换，主要是通过处理器的指令来保证操作的原子性，它包含三个操作数：   变量内存地址，V表示 旧的预期值，A表示 准备设置的新值，B表示 当执行CAS指令时，只有当V等于A时，才会用B去更新V的值，否则就不会执行更新操作。 那么CAS有什么缺点吗？   CAS的缺点主要有3点：   ABA问题：ABA的问题指的是在CAS更新的过程中，当读取到的值是A，然后准备赋值的时候仍然是A，但是实际上有可能A的值被改成了B，然后又被改回了A，这个CAS更新的漏洞就叫做ABA。只是ABA的问题大部分场景下都不影响并发的最终效果。 Java中有AtomicStampedReference来解决这个问题，他加入了预期标志和更新后标志两个字段，更新时不光检查值，还要检查当前的标志是否等于预期标志，全部相等的话才会更新。 循环时间长开销大：自旋CAS的方式如果长时间不成功，会给CPU带来很大的开销。 只能保证一个共享变量的原子操作：只对一个共享变量操作可以保证原子性，但是多个则不行，多个可以通过AtomicReference来处理或者使用锁synchronized实现。   git 和 svn 什么区别？   GIT是分布式的，SVN不是：   这是GIT和其它非分布式的版本控制系统，例如SVN，CVS等，最核心的区别。如果你能理解这个概念，那么你就已经上手一半了。需要做一点声明，GIT并不是目前第一个或唯一的分布式版本控制系统。还有一些系统，例如Bitkeeper, Mercurial等，也是运行在分布式模式上的。但GIT在这方面做的更好，而且有更多强大的功能特征。 GIT跟SVN一样有自己的集中式版本库或服务器。但，GIT更倾向于被使用于分布式模式，也就是每个开发人员从中心版本库/服务器上chect out代码后会在自己的机器上克隆一个自己的版本库。可以这样说，如果你被困在一个不能连接网络的地方时，就像在飞机上，地下室，电梯里等，你仍然能够提交文件，查看历史版本记录，创建项目分支，等。对一些人来说，这好像没多大用处，但当你突然遇到没有网络的环境时，这个将解决你的大麻烦。 GIT把内容按元数据方式存储，而SVN是按文件：   所有的资源控制系统都是把文件的元信息隐藏在一个类似.svn,.cvs等的文件夹里。如果你把.git目录的体积大小跟.svn比较，你会发现它们差距很大。因为,.git目录是处于你的机器上的一个克隆版的版本库，它拥有中心版本库上所有的东西，例如标签，分支，版本记录等。   GIT分支和SVN的分支不同：   分支在SVN中一点不特别，就是版本库中的另外的一个目录。如果你想知道是否合并了一个分支，你需要手工运行像这样的命令svn propget svn:mergeinfo，来确认代码是否被合并。感谢Ben同学指出这个特征。所以，经常会发生有些分支被遗漏的情况。然而，处理GIT的分支却是相当的简单和有趣。你可以从同一个工作目录下快速的在几个分支间切换。你很容易发现未被合并的分支，你能简单而快捷的合并这些文件。   Http协议   Http特点   HTTP是无状态的。同一个客户第二次访问同一个服务器上的页面时。服务器的响应与第一次被访问时的相同，因为服务器并不记得曾经访问过的这个客户，也不记得为该客户曾经服务过多少次。这个特性简化了服务器的设计，使服务器更容易支持大量并发的HTTP请求。在实际应用中，通常使用Cookie加数据库的方式跟踪用户的活动。Cookie是存储在用户主机中的文本文件，里面有一串“识别码”，用于Web服务识别用户。Web服务器根据Cookie就能从数据库中查询到该用户的活动记录，进而执行一些个性化的工作，如根据用户之前浏览过的商品向其推荐新产品等。 HTTP采用TCP作为运输层协议，保证了数据的可靠传输。HTTP不必考虑数据在传输过程中被丢弃后又怎样被重传。但是HTTP协议本身是无连接的，虽然HTTP使用了TCP连接，但通信的双方在交换HTTP报文之前不需要先建立HTTP连接。 HTTP既可以使用非持久连接也可以使用持久连接。 对于非持久连接，每一个网页元素对象的传输都需要单独建立一个TCP连接。如图所示。第三次握手的报文段中捎带了客户对万维网文档的请求，请求一个万维网文档所需的时间是该文档的传输时间（与文档大小成正比）加上两倍往返时间RTT。 持久连接是万维网服务器在发送响应后仍然保持这条连接，使同一个客户和服务器可以继续在这条连接上传送后续的HTTP请求和响应报文。持久连接又分为非流水线和流水线两种方式。对于非流水线方式，客户在收到前一个响应后才能发出下一个请求。HTTP/1.1的默认模式是使用流水线的持久连接。这种情况下，客户每遇到一个对象引用就立即发出一个请求，因而客户可以一个接一个地连续发出对各个引用对象的请求。如果所有的请求和响应都是连续发送的，那么所有引用到的对象共计经历一个RTT延迟，而不是像非流水线版本那样，每个引用都必须有一个RTT延迟。 HTTP的报文结构   HTTP有两类报文：请求报文从客户向服务器发送的请求报文；响应报文从服务器到客户的应答。 HTTP两种报文都是由三个部分组成，即开始行、首部行、实体主体，从上图可以看出主要是开始行不同。 开始行用于区别是请求报文还是响应报文。在请求报文中的开始行叫请求行，响应报文的开始行叫状态行。开始行的三个字段之间都以空格分割开，最后回车换行。请求报文的“请求行”有三个内容：方法、请求资源的URL以及HTTP版本。常用的方法如下： GET：请求读取由URL所标志的信息； HEAD：请求读取URL所标志的信息的首部； POST：给服务器添加信息（如注释）； CONNECT：用于代理服务器。 首部行用于说明浏览器、服务器或报文主体的一些信息。在每个首部行都有首部字段名和它的值，每一行在结束的地方都要有回车和换行。在整个首部结束时，还有一空行将首部行和实体主体分开。实体主体在请求报文中一般不使用这个字段，响应报文也可能没有  ","categories": ["interview"],
        "tags": ["interview","面试八股文"],
        "url": "/jekyll-blog/interview/%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87-%E6%AD%A6%E6%B1%89%E5%B0%8F%E7%B1%B3/",
        "teaser": "/jekyll-blog/assets/images/tease.jpg"
      },{
        "title": "RabbitMQ最佳实践",
        "excerpt":"有些应用程序需要非常高的吞吐量，而其他一些应用程序却正在发布批处理作业，这些作业可能会延迟一段时间。在设计系统时，目标应该是最大限度地将性能和可用性结合起来，这对您的特定应用程序是有意义的。错误的体系结构设计决策或客户端错误，可能会损坏中间件或影响吞吐量。   您的发布服务器可能会停止运行，或者由于内存使用过多而导致服务器崩溃。本系列文章重点关注rabbitmq的最佳实践。应做和不应做两种不同使用类别的最佳实践相混合;高可用性和高性能（高吞吐量）。我们将讨论队列大小、常见错误、延迟队列、预取值、连接和通道、HIPE和集群中的节点数。这些通常都是最佳实践规则，基于我们在使用rabbitmq时获得的经验。      AMQP 0-9-1模型： https://blog.csdn.net/gaoyang8320/article/details/78312587    原文:  https://www.cloudamqp.com/blog/2017-12-29-part1-rabbitmq-best-practice.html           目录     RabbitMQ最佳实践           Queues                   尽可能少排队           启用延迟队列以获得可预测的性能           限制队列大小（TTL或最大长度）           队列数量           将你的对列拆分到不同的核心上           不要在临时队列上设置自己的名称           自动删除不再使用的队列           为优先级队列设置使用限制                       Payload - RabbitMQ message 的大小和类型       连接和通道（Connections and channels）                   不要在线程之间共享通道（channels）           不要频繁打开和关闭连接或通道           为发布者和消费者区分连接（connections ）           大量的连接和通道可能会影响rabbitmq管理接口的性能                       Acknowledgements 和Confirms                   未确认的消息                       持久消息和持久队列       TLS and AMQPS       预取（Prefetch）                   如何设置合适的预取值？                       HiPE       群集中的节点数（群集和高可用性）                   记住在新vhosts上启用HA                       Routing (exchanges 设置)       Disable 无用的 plugins       不要在生产环境将rabbitmq管理统计速率模式设置为生产中的“详细信息”       使用更新的rabbitmq客户端库       使用最新稳定的rabbitmq和erlang版本       小心使用TTL                   Dead lettering           TTL                                RabbitMQ最佳实践   Queues   尽可能少排队  队列中的许多消息会对RAM的使用造成很大的负担。为了释放RAM，rabbitmq将（页面输出）消息刷新到磁盘。此过程会降低排队速度。当有许多消息需要分页取出时，分页过程通常会花费时间并阻止队列处理消息。许多消息可能会对中间件的性能产生负面影响。   当有许多消息重启集群时，也是费时的，因为必须重建索引。重新启动后，在群集中的节点之间同步消息也需要时间。   启用延迟队列以获得可预测的性能   在rabbitmq 3.6中添加了一个名为lazy queues的功能。懒惰队列是消息自动存储到磁盘上的队列。只有在需要时才将消息加载到内存中。对于懒惰的队列，消息直接进入磁盘，因此RAM的使用被最小化，但是吞吐时间将花费更长的时间。   我们已经看到，懒惰的队列以更好的可预测性的方式，创建了一个更稳定的集群。要让您的消息不出现警告，请刷新到磁盘。你不会突然被一个性能冲击问题所困扰。如果您一次发送大量消息（例如处理批处理作业），或者如果您认为您的消费者一直无法跟上发布者的速度，我们建议您启用延迟队列。   Warning Notice: 请注意，如果需要非常高的性能，您应该禁用延迟队列-如果队列时间总是很短，或者设置最大长度策略。.   限制队列大小（TTL或最大长度）   对于经常受到消息峰值冲击的应用程序，以及要求吞吐量比其他任何东西都重要的应用程序，可以推荐的另一做法是设置队列的最大长度。这样可以通过丢弃来自队列头部的消息来保持队列的简短性，从而使队列永远不会超过max-length设置。   队列数量   队列在rabbitmq中是单线程的，一个队列可以处理大约50k条消息/秒。如果您有多个队列和消费者，您可以在多核系统上获得更好的吞吐量。如果在底层节点上拥有与核心一样多的队列，那么您将获得最佳吞吐量。   rabbitmq管理接口为集群中的每个队列收集和计算度量。如果您有数千个活动队列和使用者，这可能会减慢服务器的运行速度。如果队列太多，CPU和RAM的使用也可能受到负面影响。   将你的对列拆分到不同的核心上   队列性能受限于一个CPU核心。因此，如果将队列拆分到不同的核心，您将获得更好的性能；如果您拥有rabbitmq集群，您也可以将他们拆分到不同的节点。   rabbitmq队列绑定到最初声明它们的节点。即使您创建了一个rabbitmq中间件集群，所有路由到特定队列的消息都将转到该队列所在的节点。您可以在节点之间平均地手动拆分队列，但缺点是您需要记住队列的位置。   如果您有多个节点或具有多个核心的单节点集群，我们建议使用两个插件来帮助您:           Consistent hash exchange plugin 一致的哈希交换插件允许您使用exchange 在队列之间加载平衡消息。通过消息的路由密钥，发送到exchange 的消息在多个队列中均匀一致地分布。该插件创建路由密钥的散列，并在绑定到该exchange 的队列之间传播消息。如果不向发布服务器中添加充足的有关队列数量及其bindings 的信息，手动执行此操作可能很快就会出现问题。 如果需要最大限度地使用集群中的多个核心，可以使用一致的哈希交换插件。请注意，从所有队列中消耗是很重要的。阅读此处有关一致哈希交换插件的更多信息。            RabbitMQ sharding rabbitmq sharding插件为您自动对队列进行分区，也就是说，一旦您将一个exchange 定义为sharded，那么在每个集群节点上自动创建支持队列，并在它们之间共享消息。rabbitmq sharding向使用者显示了一个队列，但它可能是后台运行在它后面的多个队列。rabbitmq sharding插件为您提供了一个集中的位置，通过向集群中的其他节点添加队列，您可以将消息以及跨多个节点的负载平衡发送到该位置。在这里阅读更多关于RabbitMQ sharding的信息。       不要在临时队列上设置自己的名称   当您想要在生产者和消费者之间共享队列时，为队列命名是很重要的，但是如果您使用临时队列，则不重要。相反，您应该让服务器使用一个随机的队列名称，而不是你自己命名一个——或者修改rabbitmq策略。   自动删除不再使用的队列   客户机连接可能会失败，并可能留下未使用的资源（队列），留下许多队列可能会影响性能。自动删除队列有三种方法:     您可以在队列上设置TTL策略。例如，28天的TTL策略将删除28天内未使用的队列。   当自动删除队列的最后一个使用者已取消或通道/连接已关闭时（或当它与服务器失去TCP连接时），自动删除队列将被删除;   专用队列只能通过声明连接被使用（从哪里使用、清除、删除等）。专用队列在其声明连接关闭或消失时被删除（例如，由于底层TCP连接丢失）。   为优先级队列设置使用限制   在 Erlang VM 的内部队列每个队列均使用用了一个优先级别，他们耗费了一些资源。在大多数情况下，不超过5个优先级就足够了。   Payload - RabbitMQ message 的大小和类型   一个常见的问题是如何处理发送到rabbitmq的消息的palyload（消息大小）。当然，您不应该在消息中发送非常大的文件信息，但是每秒的消息数是一个比它本身的消息大小更大的瓶颈。发送多个小消息可能是一个坏的选择。一个更好的办法是将它们捆绑成一个更大的消息，让消费者将其拆分。但是，如果捆绑多条消息，则需要记住这可能会影响处理时间。如果其中一条捆绑消息失败，是否需要重新处理所有这些消息？如何设置这个取决于带宽和体系结构。   连接和通道（Connections and channels）   每个连接使用大约100kb的RAM（如果使用TLS，甚至更多）。数千个连接可能是rabbitmq服务器的沉重负担。在最坏的情况下，服务器可能由于内存不足而崩溃。AMQP协议有一种称为“多路复用”的机制，它“复用”单个TCP连接。它建议每个进程只创建一个TCP连接，并在这个唯一一个连接的基础上为不同的线程使用多个通道。连接也应该是长连接的。AMQP连接的握手过程非常复杂，至少需要7个TCP数据包（如果使用了TLS，则需要更多）。   相反，如果需要，可以更频繁地打开和关闭通道。如果可能的话，甚至通道也应该是长寿命的，例如，在每个发布信息线程中复用相同的通道。每次发布信息时不用打开频道。最佳实践是复用连接，使用各通道在一个连接的基础上实现多路复用。理想情况下，每个进程只能有一个连接，然后在应用程序中为每个线程使用一个通道，而每个channel 复用同一个连接即可。   不要在线程之间共享通道（channels）   您还应该确保不在线程之间共享通道，因为大多数客户机不保证通道是线程安全的（因为这样会对性能产生严重的负面影响）。   不要频繁打开和关闭连接或通道   确保不要在线程之间共享通道，因为大多数客户机不会使通道线程安全（因为这样会对性能产生严重的负面影响）。   为发布者和消费者区分连接（connections ）   为发布者和消费者区分连接以获得高吞吐量。当发布服务器向服务器发送太多要处理的消息时，rabbitmq可以对TCP连接施加反向压力。如果消费者使用相同的TCP连接，服务器可能不会从客户机接收消息确认。因此，消费性能也会受到影响。而随着消费速度的降低，服务器将不堪重负。   大量的连接和通道可能会影响rabbitmq管理接口的性能   具有大量连接和通道的另一个影响为rabbitmq管理接口的性能。对于每个连接和通道性能，指标必须收集、分析和显示度量。   Acknowledgements 和Confirms   在连接失败的情况下，传输中的消息可能会丢失，并且可能需要重新传输此类消息。Acknowledgements 让服务器和客户机知道何时重新传输消息。客户机可以在收到消息时对其进行确认，也可以在客户机完全处理完消息后对其进行确认。Acknowledgement 具有性能影响，因此为了实现最快的吞吐量，应该禁用手动确认。   接收重要消息的消费应用程序在完成需要对其进行的任何操作之前不应确认消息，这样未处理的消息（工作进程崩溃、异常等）就不会丢失。   发布确认，是相同的事情，但用于发布。服务器收到来自发布服务器的消息时会进行确认。发布确认也会影响性能。但是，应该记住，如果发布者至少需要处理一次消息，就需要这样做。   未确认的消息   所有未确认的消息必须驻留在服务器上的RAM中。如果您有太多未确认的消息，您将耗尽内存。限制未确认消息的一个有效方法是客户端预取的消息数做出相关设置。在预取部分了解有关预取的更多信息。   持久消息和持久队列   如果您不能承受丢失任何消息的代价，请确保您的队列声明为“持久”，并且您的消息以传递模式“持久”发送。   为了避免在中间件中丢失消息，需要为中间件重新启动、中间件硬件故障或中间件崩溃时做好准备。为了确保消息和中间件定义在重新启动后仍然存在，我们需要确保它们在磁盘上。在中间件重新启动期间，不持久的消息、交换和队列将会被丢失。   持久性消息更重，因为它们必须写入磁盘。请记住，即使您发送的是临时消息，懒惰的队列也会对性能产生相同的影响。对于高性能-请使用瞬态消息。   TLS and AMQPS   您可以通过amqps连接到rabbitmq，这是用tls包装的amqp协议。由于所有流量都必须加密和解密，因此TLS会影响性能。为了获得最大的性能，我们建议使用vpc对等，那么流量是私有的，并且是独立的，不涉及AMQP客户机/服务器。   在cloudamqp中，我们将rabbitmq服务器配置为只接受快速但安全的加密密码并确定其优先级。   预取（Prefetch）   预取值用于指定多少条消息将同时被发送给消费者。它被用来从你的消费者那里得到尽可能多的东西(饱和工作)。   来自rabbitmq.com：“我们的目标是让消费者饱和工作，但要最大限度地减小客户机的缓冲区大小，因此更多的消息被留在Rabbit的队列中，从而对新的消费者可用，或者发送给那些变得空闲的消者。”   rabbitmq的默认预取设置为客户端提供了一个不受限制的缓冲区，这意味着rabbitmq在默认情况下会将尽可能多的消息发送给任何看起来准备接受它们的客户机。发送的消息由rabbitmq客户端库（在使用者中）缓存，直到对其进行处理。预取限制了在确认消息之前客户端可以接收的消息数。所有预取的消息都将从队列中删除，并且对其他使用者不可见。   预取数太小可能会影响性能，因为rabbitmq大多数时间都在等待获得发送更多消息的许可。下图显示的是长时间的空转时间。在本例中，QoS预取设置为1。这意味着rabbitmq在往返完成（传递、处理、确认）之前不会发送下一条消息。图片中的整个周期时间总共为125ms，处理时间仅为5ms。   另一方面，大量的预取数可以接收队列中的大量消息并将其传递给同一个消费者，但是其他使用者却处于空闲状态。   如何设置合适的预取值？   如果您有一个或几个消费者快速处理消息，我们建议您一次预取多个消息。尽量让你的客户端繁忙。如果您一直有大约相同的处理时间，并且网络行为保持不变-您只需在客户机上为每个消息计算总的往返时间/处理时间，即可获得估计的预取值。   如果您有许多消费者，并且处理时间很短，我们建议预取值设置的应该比单个或少数使用者要低一些。太低的值会让消费者空转很多，因为他们需要等待消息到达。过高的值可能会使一个消费者忙碌，而其他消费者则处于空闲状态。   如果您有许多使用者和/或处理时间较长，我们建议您将预取计数设置为1，以便消息在所有消费者中均匀分布。   请注意，如果客户端自动确认消息，则预取值将不起作用。   一个典型的错误是有一个无限的预取，其中一个客户机接收所有的消息，耗尽内存并崩溃，然后所有的消息都被重新传递。   有关rabbitmq预取的信息，请参阅推荐的rabbitmq文档。   HiPE   HIPE将以增加启动时间为代价增加服务器吞吐量。启用HIPE时，将在启动时编译rabbitmq。根据我们的基准测试，吞吐量增加了20-80%。HIPE的缺点是启动时间也增加了很多，大约1-3分钟。在rabbitmq的文档中，hipe仍然被标记为实验性的。   如果您需要高可用性，请不要启用HIPE。   群集中的节点数（群集和高可用性）   当您用一个节点创建一个cloudamqp实例时，您将得到一个具有高性能的单个节点。一个节点将为您提供最高的性能，因为消息不需要在多个节点之间进行镜像。   当您使用两个节点创建一个CloudAMQP实例时，与单个节点的相比，您将获得一半的性能。节点位于不同的可用性区域，队列在可用性区域之间自动镜像。两个节点将为您提供高可用性，因为一个节点可能崩溃或被标记为受损，但另一个节点仍将启动并运行，准备接收消息。   当您使用三个节点创建一个CloudAMQP实例时，与单个节点的相同计划大小相比，您将获得1/4的性能。节点位于不同的可用性区域，队列在可用性区域之间自动镜像。您也可以暂停少数组件-与允许每个节点响应相比，通过关闭少数组件，您减少了重复传递。暂停少数组件是三节点集群中的一种分区处理策略，它可以防止由于网络拆分而导致数据不一致。   记住在新vhosts上启用HA   我们在cloudamqp集群中注意到的一个常见错误是，用户创建了一个新的vhost，但忘记为新的vhost启用一个ha策略。如果没有HA策略，则不会在节点之间同步消息。   Routing (exchanges 设置)   直接交换是最快速。如果有许多bindings ，rabbitmq必须计算将消息发送到何处。   Disable 无用的 plugins   有些插件可能非常好用，但它们可能会消耗大量的CPU或RAM。因此，不建议将它们用于生产服务器。确保禁用不使用的插件。您可以通过CloudAmqp中的控制面板启用许多不同的插件。  不要在生产环境将rabbitmq管理统计速率模式设置为生产中的“详细信息”   将rabbitmq管理统计速率模式设置为detailed会严重影响性能，不应在生产中使用。   使用更新的rabbitmq客户端库   确保您使用的是最新推荐的客户端库版本  使用最新稳定的rabbitmq和erlang版本   保持最新稳定版本的rabbitmq和erlang。在为客户发布新的主要版本之前，我们通常会在很大程度上对其进行测试。请注意，在为新集群选择版本的下拉列表中，我们始终使用最推荐的版本作为所选选项（默认）。   小心使用TTL   Dead lettering和TTL是rabbitmq中的两个流行功能，应该谨慎使用。TTL和Dead lettering可以产生您没有预料到的性能影响。   Dead lettering   使用x-dead-letter-exchange属性声明的队列将向指定的dead-letter-exchange 发送被拒绝、非确认或过期（带有ttl）的消息。如果您指定了x-dead-letter-routing-key，则消息的路由键将在dead lettered时更改。   TTL  通过使用x-message-ttl属性声明队列，如果消息在指定的时间内未被使用，则将从队列中丢弃消息。  ","categories": ["MQ"],
        "tags": ["Rabbit Mq"],
        "url": "/jekyll-blog/mq/RabbitMQ%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/",
        "teaser": "/jekyll-blog/assets/images/tease.jpg"
      },{
        "title": "spring cloud config快速入门",
        "excerpt":"Spring Cloud Config 跨多个应用程序和环境，用于存储和提供分布式配置的 clinet/server方案。 理想情况下，此配置存储在 Git 版本控制下进行版本控制，并且可以在应用程序运行时进行修改。 虽然它非常适合Spring applications所有支持的配置文件格式以及 Environment、PropertySource 或 @Value 等结构的 Spring 应用程序，但它也可以用于任何编程语言运行的任何环境使用。   在这篇文章中，我们将重点介绍如何设置 Git 支持的配置服务器、在简单的 REST 应用程序服务器中使用它以及设置包括加密属性值在内的安全环境的示例。                                                                                          spring cloud config 架构              目录     项目依赖   server端配置   初始化 配置仓库   查询配置   client配置   加密和解密   CSRF   key管理   使用多个keys   加密配置   总结        项目依赖      首先创建两个新的 Maven 项目。server 项目依赖于 spring-cloud-config-server 模块，以及 spring-boot-starter-security 和 spring-boot-starter-web 启动包.   &lt;dependency&gt;     &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;     &lt;artifactId&gt;spring-cloud-config-server&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt;      对于client项目，我们将只需要 spring-cloud-starter-config 和 spring-boot-starter-web 模块.   &lt;dependency&gt;     &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;     &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt;   server端配置   server应用程序的主要部分是一个配置类——更具体地说是一个@SpringBootApplication——它通过自动配置注释@EnableConfigServer 引入所有需要的设置：   @SpringBootApplication @EnableConfigServer public class ConfigServer {          public static void main(String[] arguments) {         SpringApplication.run(ConfigServer.class, arguments);     } }   配置服务器端口和一个提供版本控制的 Git-url。   TIP: 如果您计划使用指向同一个配置存储库的多个配置服务器实例，您可以将服务器配置为将您的存储库克隆到本地临时文件夹中。但是请注意具有双因素身份验证的私有存储库，它们很难处理！在这种情况下，在本地文件系统上克隆它们并使用副本会更容易。   还有一些占位符变量和搜索模式用于配置可用的存储库 url.但这超出了我们文章的范围。官方文档是一个很好的起点。 我们还需要在 application.properties 中为 Basic-Authentication 设置用户名和密码，以避免每次都自动生成密码 应用程序重启：   server.port=8888 spring.cloud.config.server.git.uri=ssh://localhost/config-repo spring.cloud.config.server.git.clone-on-start=true spring.security.user.name=root spring.security.user.password=s3cr3t    初始化 配置仓库   为了完成我们的服务器，我们必须在server  配置的 spring.cloud.config.server.git.uri 初始化一个 Git repository。  配置文件的名称像普通的 Spring application.properties 一样组成，但不是application这个词。例如：   $&gt; git init $&gt; echo 'user.role=Developer' &gt; config-client-development.properties $&gt; echo 'user.role=User'      &gt; config-client-production.properties $&gt; git add . $&gt; git commit -m 'Initial config-client properties'   查询配置      启动server 端。   使用以下api 查询 配置信息.     /{application}/{profile}[/{label}]   /{application}-{profile}.yml   /{label}/{application}-{profile}.yml   /{application}-{profile}.properties   /{label}/{application}-{profile}.properties   其中 {label} 占位符指的是 Git 分支，{application} 指的是客户端的应用程序名称，而 {profile} 指的是客户端当前活动的应用程序配置文件。   比如， 我们可以通过以下方式检索在分支 master 下 profile=development的配置属性.   $&gt; curl http://root:s3cr3t@localhost:8888/config-client/development/master   client配置   这是一个非常简单的客户端应用程序，由一个带有一个 GET 方法的 REST 控制器组成。 用于获取服务器的配置必须放在名为 bootstrap.application 的resource文件中，因为该文件（顾名思义）将在应用程序启动时很早加载：      app:   @SpringBootApplication @RestController public class ConfigClient {          @Value(\"${user.role}\")     private String role;      public static void main(String[] args) {         SpringApplication.run(ConfigClient.class, args);     }      @GetMapping(       value = \"/whoami/{username}\",         produces = MediaType.TEXT_PLAIN_VALUE)     public String whoami(@PathVariable(\"username\") String username) {         return String.format(\"Hello!            You're %s and you'll become a(n) %s...\\n\", username, role);     } }      bootstrap.properties:   spring.application.name=config-client spring.profiles.active=development spring.cloud.config.uri=http://localhost:8888 spring.cloud.config.username=root spring.cloud.config.password=s3cr3t      test:   $&gt; curl http://localhost:8080/whoami/Mr_Pink     结果’   Hello! You're Mr_Pink and you'll become a(n) Developer...   加密和解密   必须：要将“密码学“中强加密与 Spring 加密和解密功能一起使用，您需要在 JVM 中安装 Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files。这些可以从 Oracle 官网下载。   由于配置服务器正在支持属性值的加密和解密，您可以使用公共存储库来存储诸如用户名和密码等敏感数据。加密值以字符串 {cipher} 为前缀。如果服务器配置为使用对称密钥或密钥对，则可以通过对路径/encrypt的 REST 调用生成加密信息。   当然解密的端点也是可用的。加解密这两个端点都接受包含应用程序名称及其当前profile配置文件的占位符的路径：/*/{name}/{profile}。这对于控制每​​个客户端的加密特别有用。但是，在它们变得有用之前，您必须配置一个加密密钥，我们将在下一节中进行。   TIP: 如果您使用 curl 调用 en-/decryption API，最好使用 –data-urlencode 选项（而不是 –data/-d），或者将 Content-Type 标头显式设置为 text/plain。这确保正确处理加密值中的特殊字符，如+。   如果通过客户端获取配置时发现无法自动解密某个值，那么其keys将使用名称本身重命名，并以 invalid一词为前缀。这种情况应该避免发生，例如使用加密值作为密码。   TIP:: 在设置包含 YAML 文件的存储库时，您必须用单引号将加密和前缀值括起来！对于Properties，情况并非如此。   CSRF   默认情况下，Spring Security 为发送到我们应用程序的所有请求启用 CSRF 保护。 因此，为了能够使用 /encrypt 和 /decrypt 端点，让我们为它们禁用 CSRF：   @Configuration public class SecurityConfiguration extends WebSecurityConfigurerAdapter {      @Override     public void configure(HttpSecurity http) throws Exception {         http.csrf()           .ignoringAntMatchers(\"/encrypt/**\")           .ignoringAntMatchers(\"/decrypt/**\");          super.configure(http);     } }   key管理   配置服务器默认启用以对称或非对称方式加密属性值。           对称加密，您只需将 application.properties 中的属性 encrypt.key 设置为您选择的机密。或者，您可以传入环境变量 ENCRYPT_KEY。            非对称加密， 您可以将 encrypt.key 设置为 PEM编码 的字符串值或 配置使用keystore。       因为我们的演示服务器需要一个高度安全的环境，所以我们选择了后一个选项并生成一个新的密钥库，包括一个 RSA 密钥对.      使用 Java 密钥工具：   $&gt; keytool -genkeypair -alias config-server-key \\        -keyalg RSA -keysize 4096 -sigalg SHA512withRSA \\        -dname 'CN=Config Server,OU=Spring Cloud,O=Baeldung' \\        -keypass my-k34-s3cr3t -keystore config-server.jks \\        -storepass my-s70r3-s3cr3t      我们将创建的密钥库添加到我们服务器的 bootstrap.properties 并重新运行它：   encrypt.keyStore.location=classpath:/config-server.jks encrypt.keyStore.password=my-s70r3-s3cr3t encrypt.keyStore.alias=config-server-key encrypt.keyStore.secret=my-k34-s3cr3t      我们可以查询加密端点并将响应作为值添加到我们存储库中的配置中：   $&gt; export PASSWORD=$(curl -X POST --data-urlencode d3v3L \\        http://root:s3cr3t@localhost:8888/encrypt) $&gt; echo \"user.password={cipher}$PASSWORD\" &gt;&gt; config-client-development.properties $&gt; git commit -am 'Added encrypted password' $&gt; curl -X POST http://root:s3cr3t@localhost:8888/refresh      验证。 如果我们的设置工作正常，修改 ConfigClient 相关类并重新启动我们的客户端：   @SpringBootApplication @RestController public class ConfigClient {      ...          @Value(\"${user.password}\")     private String password;      ...     public String whoami(@PathVariable(\"username\") String username) {         return String.format(\"Hello!            You're %s and you'll become a(n) %s, \" +           \"but only if your password is '%s'!\\n\",            username, role, password);     } }      结果. 如果我们的配置值被正确解密，对我们的客户端的最终查询为:   $&gt; curl http://localhost:8080/whoami/Mr_Pink Hello! You're Mr_Pink and you'll become a(n) Developer, \\   but only if your password is 'd3v3L'!    使用多个keys   如果您想使用多个密钥进行加密和解密，例如：为每个服务的应用程序使用一个专用密钥，您可以在 {cipher} 前缀和 BASE64 编码的属性值之间以 {name:value} 的形式添加另一个前缀.   配置服务器理解如{secret:my-crypto-secret} 或 {key:my-key-alias}的前缀，, 几乎是开箱即用的。非对称加密 需要在 application.properties 中配置keystore。密钥库以所匹配密钥别名来搜索出来。例如：   user.password={cipher}{secret:my-499-s3cr3t}AgAMirj1DkQC0WjRv... user.password={cipher}{key:config-client-key}AgAMirj1DkQC0WjRv...   TIP: 对于没有密钥库的场景，您必须实现一个 TextEncryptorLocator 类型的 @Bean，它处理查找并为每个密钥返回一个 TextEncryptor-Object。   加密配置   如果要禁用服务器端加密并在本地处理属性值的解密，可以将以下内容放入服务器的 application.properties：   spring.cloud.config.server.encrypt.enabled=false   总结   现在我们能够创建一个配置服务器来从 Git 存储库向客户端应用程序提供一组配置文件。您还可以使用此类服务​​器执行其他一些操作。 例如：      以 YAML 或 Properties 格式而不是 JSON 提供配置——也解决了占位符问题。 在非 Spring 环境中使用它时，这可能很有用，其中配置不直接映射到 PropertySource。   提供纯文本配置文件。 依次可选地使用已解析的占位符。例如，这对于提供依赖于环境的日志记录配置很有用。   将配置服务器嵌入到应用程序中，它从 Git 存储库配置自身，而不是作为独立的应用程序运行，为客户端提供服务。因此，必须设置一些引导程序属性和/或必须删除 @EnableConfigServer 注释，这取决于用例。   使配置服务器可用于 Spring Netflix Eureka服务发现并启用 配置客户端中的自动服务器发现。 如果服务器没有固定位置或在其位置移动，这将变得很重要。  ","categories": ["Spring Cloud"],
        "tags": ["Spring Cloud Config"],
        "url": "/jekyll-blog/spring%20cloud/spring-cloud-config%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/",
        "teaser": "/jekyll-blog/assets/images/tease.jpg"
      },{
        "title": "Alibaba Sentinel介绍",
        "excerpt":"顾名思义，Sentinel 是微服务的强大守护者。它提供流量控制、并发限制、断路和自适应系统保护等功能，以保证其可靠性。它是阿里巴巴集团积极维护的开源组件。此外，它正式成为 Spring Cloud Circuit Breaker. 的一部分。   在本文中，我们将了解 Sentinel 的一些主要功能。此外，我们将看到如何使用它的示例、它的注释支持和它的监控仪表板         Sentinel 角色          目录     特性           流量控制       熔断和降级       自适应系统保护           使用           1. 依赖       2. 定义资源       3. 定义流量控制规则       4. 定义降级规则       5. 定义系统保护规则           注解支持   监控仪表盘           1. 启动仪表盘服务       2. 添加依赖       链接服务到仪表盘                特性   流量控制   Sentinel 控制随机请求传入的速度，以避免微服务过载。这可确保我们的服务不会因流量激增而中断。它支持多种流量整形策略。当每秒查询数 (QPS) 过高时，这些策略会自动将流量调整为适当的策略。   其中一些流量整形策略是：      直接拒绝模式–当每秒请求数超过设定的阈值时，它会自动拒绝进一步的请求；   慢启动预热模式–如果流量突然激增，此模式可确保请求计数逐渐增加，直到达到上限;   熔断和降级   当一个服务同步调用另一个服务时，另一个服务可能会因某种原因关闭。在这种情况下，线程会被阻塞，因为它们一直在等待其他服务响应。这可能会导致资源耗尽，并且调用方服务也将无法处理进一步的请求。这称为级联效应，可以摧毁我们的整个微服务架构。   为了防止这种情况，断路器出现在架构中。它将立即阻止对其他服务的所有后续调用。超时时间过后，会传递一些请求。如果它们成功，则断路器恢复正常流程。否则，超时时间将重新开始。   Sentinel 使用最大并发限制原理来实现熔断。它通过限制并发线程数来减少不稳定资源的影响。   Sentinel 还会降级不稳定的资源。当资源的响应时间太长时，对资源的所有调用都会在指定的时间窗口内被拒绝。这可以防止调用变得非常缓慢，从而导致级联效应的情况。   自适应系统保护   Sentinel 会在系统负载过高时保护我们的服务器 。它使用 load1（系统负载）作为指标来启动流量控制。请求将在以下情况下被阻止：      当前系统负载（load1）&gt; 阈值（highestSystemLoad）；   当前并发请求（线程数）&gt; 估算容量（最小响应时间 * 最大 QPS）   使用   1. 依赖   &lt;dependency&gt;     &lt;groupId&gt;com.alibaba.csp&lt;/groupId&gt;     &lt;artifactId&gt;sentinel-core&lt;/artifactId&gt;     &lt;version&gt;1.8.0&lt;/version&gt; &lt;/dependency&gt;   2. 定义资源   使用 Sentinel API 在 try-catch 块中定义具有相应业务逻辑的资源：   try (Entry entry = SphU.entry(\"HelloWorld\")) {     // Our business logic here.     System.out.println(\"hello world\"); } catch (BlockException e) {     // Handle rejected request. }    3. 定义流量控制规则   这些规则控制流向我们的资源，例如阈值计数或控制行为——例如，直接拒绝或缓慢启动。我们使用 FlowRuleManager.loadRules() 来配置流规则：   List&lt;FlowRule&gt; flowRules = new ArrayList&lt;&gt;(); FlowRule flowRule = new FlowRule(); flowRule.setResource(RESOURCE_NAME); flowRule.setGrade(RuleConstant.FLOW_GRADE_QPS); flowRule.setCount(1); flowRules.add(flowRule); FlowRuleManager.loadRules(flowRules);      此规则定义了我们的资源RESOURCE_NAME每秒最多可以响应一个请求。    4. 定义降级规则   使用降级规则，我们可以配置断路器的阈值 请求计数、恢复超时和其他设置。 我们使用 DegradeRuleManager.loadRules() 配置降级规则：   List&lt;DegradeRule&gt; rules = new ArrayList&lt;DegradeRule&gt;(); DegradeRule rule = new DegradeRule(); rule.setResource(RESOURCE_NAME); rule.setCount(10); rule.setTimeWindow(10); rules.add(rule); DegradeRuleManager.loadRules(rules);      此规则指定，当我们的资源 RESOURCE_NAME 无法满足 10 个请求（阈值计数）时，请求链路将中断。对资源的所有后续请求都将被 Sentinel 阻止 10 秒（时间窗口）。    5. 定义系统保护规则   使用系统保护规则，我们可以配置和确保自适应系统保护（load1 阈值、平均响应时间、并发线程数）。我们使用 SystemRuleManager.loadRules() 方法配置系统规则：   List&lt;SystemRule&gt; rules = new ArrayList&lt;&gt;(); SystemRule rule = new SystemRule(); rule.setHighestSystemLoad(10); rules.add(rule); SystemRuleManager.loadRules(rules);      此规则指定，对于我们的系统，最高系统负载为每秒 10 个请求。如果当前负载超过此阈值，则所有进一步的请求都将被阻止。    注解支持   Sentinel 还为定义资源提供了面向方面的注释支持。      添加依赖   &lt;dependency&gt;     &lt;groupId&gt;com.alibaba.csp&lt;/groupId&gt;     &lt;artifactId&gt;sentinel-annotation-aspectj&lt;/artifactId&gt;     &lt;version&gt;1.8.0&lt;/version&gt; &lt;/dependency&gt;      将 sentinel aspect  注入为bean;   @Configuration public class SentinelAspectConfiguration {      @Bean     public SentinelResourceAspect sentinelResourceAspect() {         return new SentinelResourceAspect();     } }      @SentinelResource 表示资源定义。它有 value 之类的属性，它定义了资源名称。属性fallback是回退方法名称。当断路器断开时，这种回退方法定义了我们程序的替代流程。让我们使用 @SentinelResource 注释定义资源：   @SentinelResource(value = \"resource_name\", fallback = \"doFallback\") public String doSomething(long i) {     return \"Hello \" + i; }  public String doFallback(long i, Throwable t) {     // Return fallback value.     return \"fallback\"; }      这定义了名为 resource_name 的资源以及回退方法。    监控仪表盘   Sentinel 还提供了一个监控仪表板。有了这个，我们可以监控客户端并动态配置规则。我们可以实时查看我们定义的资源的传入流量。   1. 启动仪表盘服务   首先，我们需要下载 Sentinel Dashboard jar 。然后，我们可以使用以下命令启动仪表板：   java -Dserver.port=8080 -Dcsp.sentinel.dashboard.server=localhost:8080 -Dproject.name=sentinel-dashboard -jar sentinel-dashboard.jar   TIP： 一旦仪表板应用程序启动，我们就可以按照下一节中的步骤连接我们的应用程序。   2. 添加依赖   &lt;dependency&gt;     &lt;groupId&gt;com.alibaba.csp&lt;/groupId&gt;     &lt;artifactId&gt;sentinel-transport-simple-http&lt;/artifactId&gt;     &lt;version&gt;1.8.0&lt;/version&gt; &lt;/dependency&gt;   链接服务到仪表盘   启动应用程序时，我们需要添加仪表板IP地址：   -Dcsp.sentinel.dashboard.server=consoleIp:port      现在，无论何时调用资源，仪表板都会从我们的应用程序接收心跳：          sentinel dashboard   TIP: 我们还可以使用仪表板动态地操纵流、降级和系统规则。  ","categories": ["Spring Cloud"],
        "tags": ["Spring Cloud Config","Sentinel"],
        "url": "/jekyll-blog/spring%20cloud/Alibaba-Sentinel%E4%BB%8B%E7%BB%8D/",
        "teaser": "/jekyll-blog/assets/images/tease.jpg"
      },{
        "title": "使用微服务架构语言",
        "excerpt":"微服务架构模式语言由多个模式组构成。模式语言的价值超过了其各个模式的总和，因为它定义了模式之间的这些关系：      Predecessor – Predecessor模式是激发对这种模式的需求的模式。例如，微服务架构模式是模式语言中除单体架构模式之外的其他模式的前身。   Successor – 解决此模式引入的问题的模式。例如，如果您应用微服务架构模式，则必须应用许多后继模式，包括服务发现模式和断路器模式。   Alternative – 为该模式提供了替代解决方案的模式。例如，单体架构模式和微服务架构模式是构建应用程序的替代方法。你选一个。这些关系在使用模式语言时提供了宝贵的指导。应用模式会产生问题，然后您必须通过应用后继模式来解决这些问题。模式的选择不断递归，直到您达到没有后继的模式。如果有两种或多种模式可供选择，那么您通常必须只选择一种。在许多方面，这类似于遍历图。   决策#1：单体架构还是微服务架构？   您必须做出的第一个决定是使用单体架构模式还是微服务架构模式。如果您选择微服务架构模式，您必须选择许多其他模式来处理您的决定的后果。         sentinel dashboard   决策#2：如何将应用程序分解为服务？   如果您决定使用微服务架构，则必须定义您的服务。有两个主要方向：      按业务能力分解——定义业务能力对应的服务；   按子域分解——定义DDD子域对应的服务；      这种模式产生等效的结果：围绕业务概念而非技术概念组织的一组服务。    决策#3：如何保持数据一致性并执行查询？   微服务的一个关键特性是每个服务的数据库模式。作为替代方案，共享数据库模式本质上是一种反模式，最好避免。每个服务的数据库模式极大地改变了您维护数据一致性和执行查询的方式。您将需要使用 Saga 模式。您经常需要使用命令查询职责分离 (CQRS) 模式来实现查询。   ","categories": ["MicroService"],
        "tags": ["MicroService"],
        "url": "/jekyll-blog/microservice/%E5%BA%94%E7%94%A8%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/",
        "teaser": "/jekyll-blog/assets/images/tease.jpg"
      },{
        "title": "vim 常用命令",
        "excerpt":"作为开发者，我们将经常处理文本——词表、配置文件等。我们将在本地机器上进行很多工作，我们可以使用我们喜欢的任何文本编辑器。在远程机器上， 编辑工具将受到限制。如果安装了 nano ，一个易于使用的终端文本编辑器，但它不是很强大。   幸运的是，大多数系统都安装了 Vi 或 Vim 。 Vi 代表 visual ，是一个强大、快速的模态文本编辑器，可以在 “插入模式”（文档中输入）或正常模式（输入会话命令）下工作。 在这些会话之间切换就像敲击键盘一样简单，因此对于那些不喜欢将手从键盘上移开的人来说，这非常有用。   Vim 代表 Vi IMproved ，它具有 Vi 的所有功能，并添加了一些有助于编辑源代码的出色功能。还有一个全面的帮助系统和许多可用的自定义选项。许多系统将 Vi 符号链接到 Vim， 包括 macOS 。就我个人而言，Vim 适用于我在远程主机上的所有编辑。   常用命令   基操      y: yank（复制）的缩写;   p: paste(粘贴)的缩写;   d: delete(粘贴)的缩写;   v: view 缩写，标识进入视图模式，从 光标当前的位置 开始光标经过的文档将被选中;   V: 同 v 命令, 不同的是起点是从 光标位置的当前行开始;   Ctrl + v: 同 v命令， 从光标当前位置开始和终点光标位置组成矩形区域块，作为选中区域;   常用组合命令      ggyG: 全选复制. gg-光标移动到文档最前面, y-复制， G 光标移动到末尾;   ggdG: 全选复制. gg-光标移动到文档最前面, y-删除， G 光标移动到末尾;   技巧: 命令模式下，命令是按照顺序执行的，多个 vi 或者 vim 命令组合成一个操作。比如 ggyG 组合命令的一个操作就是 光标移动到头，然后复制，最后光标移动到末尾,完成 “全选复制” 操作.  ","categories": ["Linux"],
        "tags": ["vim"],
        "url": "/jekyll-blog/linux/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/",
        "teaser": "/jekyll-blog/assets/images/tease.jpg"
      },{
        "title": "OSGI",
        "excerpt":"OSGi（开放服务网关计划）是一个用于开发和部署模块化软件程序和库的Java框架。  OSGi 有两个部分。第一部分是称为 bundles 的模块化组件的规范，它们通常被称为插件。该规范为 bundle 的生命周期定义了基础设施，并确定了 bundle 将如何交互。OSGi 的第二部分是 Java 虚拟机 ( JVM ) 级别的服务注册表，捆绑包可用于发布、发现和绑定到面向服务架构 ( SOA )中的服务.   OSGi 背后的工作始于 1999 年，当时嵌入式系统供应商和网络供应商齐心协力，为可远程管理的基于 Java 的服务框架创建了一套标准。OSGi 最初的构想是作为一种网关，用于管理家庭中的智能电器和其他支持 Internet 的设备。网关由嵌入在硬件平台（如电缆调制解调器或机顶盒）中的 Java 软件框架组成。该框架充当家庭局域网 ( LAN )上设备的中央消息代理。本质上，目标是为智能设备创建标准化的中间件，并使软件开发人员更容易管理交叉依赖项。          目录     osgi 优秀开源项目   todo…        osgi 优秀开源项目      Open Daylight;   Apache Karaft；   felix;   Open HAB;   todo…   ","categories": ["JAVA"],
        "tags": ["java","osgi"],
        "url": "/jekyll-blog/java/OSGI/",
        "teaser": "/jekyll-blog/assets/images/tease.jpg"
      },{
        "title": "C4 Model 介绍",
        "excerpt":" ","categories": ["UML"],
        "tags": ["UML","C4"],
        "url": "/jekyll-blog/uml/C4-Model/",
        "teaser": "/jekyll-blog/assets/images/tease.jpg"
      },{
        "title": "plantUML for C4 model汉化(todo)",
        "excerpt":"C4-PlantUML 结合了 PlantUML 和 C4 模型的优点，通过使用开源和平台独立工具的直观语言，提供了一种描述和交流软件架构的简单方法——尤其是在前期设计会议期间。  C4-PlantUML 包括用于使用 PlantUML 创建 C4 图的宏、构造型和其他好东西（如 VSCode 片段）。          目录     入门   支持的图表类型           Import: !include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/**C4_Deployment.puml**           关系类型   布局选项   Custom tags/stereotypes 支持和皮肤参数更新   Element properties   Version information   Snippets for Visual Studio Code   Live Templates for IntelliJ           Prerequisites       Install       Usage           Layout Options   Advanced Samples           techtribes.js       Message Bus and Microservices           Background   License           原文地址: plantuml-stdlib/C4-PlantUML       入门   在你的 C4 PlantUML .puml 文件的顶部，你需要在这个 repo 的 root目录中找到的 C4_Context.puml、C4_Container.puml 或 C4_Component.puml 文件。 要独立于任何 Internet 连接，您还可以将它下载下来,在 root目录中找到的文件，并使用附加命令行参数 -DRELATIVE_INCLUDE=\".\"（包括本地文件）激活本地转换   java -jar plantuml.jar -DRELATIVE_INCLUDE=\".\"  ...   如果要在此 repo 中使用始终最新的版本，请使用以下命令：   !include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml   现在让我们创建一个 C4 容器图：   (如果您不想在本地运行 PlantUML，您可以使用 e.g. the PlantUML Web Server.)   包含 C4_Container.puml 后，您可以使用 C4 元素定义的宏定义：“Person”、“Person_Ext”、“System”、“System_Ext”、“Container”、“Relationship”、“Boundary”和系统_边界   @startuml C4_Elements !include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml  Person(personAlias, \"Label\", \"Optional Description\") Container(containerAlias, \"Label\", \"Technology\", \"Optional Description\") System(systemAlias, \"Label\", \"Optional Description\")  Rel(personAlias, containerAlias, \"Label\", \"Optional Technology\") @enduml      除此之外，还可以定义系统或组件边界。   查看以下 C4 容器图示例：   @startuml Basic Sample !include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml  Person(admin, \"Administrator\") System_Boundary(c1, \"Sample System\") {     Container(web_app, \"Web Application\", \"C#, ASP.NET Core 2.1 MVC\", \"Allows users to compare multiple Twitter timelines\") } System(twitter, \"Twitter\")  Rel(admin, web_app, \"Uses\", \"HTTPS\") Rel(web_app, twitter, \"Gets tweets from\", \"HTTPS\") @enduml      Entities 也可以使用 图标/sprites 装饰  使用 $sprite 参数, for example:   @startuml !include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml  !define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons !define FONTAWESOME https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/font-awesome-5 !include DEVICONS/angular.puml !include DEVICONS/java.puml !include DEVICONS/msql_server.puml !include FONTAWESOME/users.puml  LAYOUT_WITH_LEGEND()  Person(user, \"Customer\", \"People that need products\", $sprite=\"users\") Container(spa, \"SPA\", \"angular\", \"The main interface that the customer interacts with\", $sprite=\"angular\") Container(api, \"API\", \"java\", \"Handles all business logic\", $sprite=\"java\") ContainerDb(db, \"Database\", \"Microsoft SQL\", \"Holds product, order and invoice information\", $sprite=\"msql_server\")  Rel(user, spa, \"Uses\", \"https\") Rel(spa, api, \"Uses\", \"https\") Rel_R(api, db, \"Reads/Writes\") @enduml      和 icons/sprites 设置相似，我们也可以对所有元素和关系添加链接:   @startuml Basic Sample !include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml  Person(admin, \"Administrator\", $sprite=\"person2\", $link=\"https://github.com/plantuml-stdlib/C4-PlantUML/blob/master/LayoutOptions.md#hide_person_sprite-or-show_person_spritesprite\") System_Boundary(c1, \"Sample System\", $link=\"https://github.com/plantuml-stdlib/C4-PlantUML\") {     Container(web_app, \"Web Application\", \"C#, ASP.NET Core 2.1 MVC\", $descr=\"Allows users to compare multiple Twitter timelines\", $link=\"https://github.com/plantuml-stdlib/C4-PlantUML/blob/master/LayoutOptions.md\") } System(twitter, \"Twitter\", $link=\"https://github.com/plantuml-stdlib/C4-PlantUML\")  Rel(admin, web_app, \"Uses\", \"HTTPS\", $link=\"https://plantuml.com/link\") Rel(web_app, twitter, \"Gets tweets from\", \"HTTPS\", $link=\"https://plantuml.com/link\") @enduml      png 本身不支持链接，因此下图生成为 svg 图像。 Github 不支持 README.md 中的 svg 链接。 如果您单击图像，则会打开一个新窗口，您可以在那里使用链接。       元素和关系可以用标签装饰，并通过计算出的图例进行解释，例如：   @startuml !include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml  AddElementTag(\"v1.0\", $borderColor=\"#d73027\") AddElementTag(\"v1.1\", $fontColor=\"#d73027\") AddElementTag(\"backup\", $fontColor=\"orange\")  AddRelTag(\"backup\", $textColor=\"orange\", $lineColor=\"orange\", $lineStyle = DashedLine())  Person(user, \"Customer\", \"People that need products\") Person(admin, \"Administrator\", \"People that administrates the products via the new v1.1 components\", $tags=\"v1.1\") Container(spa, \"SPA\", \"angular\", \"The main interface that the customer interacts with via v1.0\", $tags=\"v1.0\") Container(spaAdmin, \"Admin SPA\", \"angular\", \"The administrator interface that the customer interacts with via new v1.1\", $tags=\"v1.1\") Container(api, \"API\", \"java\", \"Handles all business logic (incl. new v1.1 extensions)\", $tags=\"v1.0+v1.1\") ContainerDb(db, \"Database\", \"Microsoft SQL\", \"Holds product, order and invoice information\") Container(archive, \"Archive\", \"Audit logging\", \"Stores 5 years\", $tags=\"backup\")  Rel(user, spa, \"Uses\", \"https\") Rel(spa, api, \"Uses\", \"https\") Rel_R(api, db, \"Reads/Writes\") Rel(admin, spaAdmin, \"Uses\", \"https\") Rel(spaAdmin, api, \"Uses\", \"https\") Rel_L(api, archive, \"Writes\", \"messages\", $tags=\"backup\")  SHOW_LEGEND() @enduml      支持的图表类型           arg.. 参数为必需的 (e.g. alias)     ?arg.. 参数为可选的  (e.g. ?descr)     *techn .. 技术参数是必需的, 但是如果技术参数通过 $tag 来定义，那么不需要techn参数         系统 Context &amp; 系统景观图            Import: !include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/**C4_Context.puml**       宏:                    Person(alias, label, ?descr, ?sprite, ?tags, $link)           Person_Ext           System(alias, label, ?descr, ?sprite, ?tags, $link)           SystemDb           SystemQueue           System_Ext           SystemDb_Ext           SystemQueue_Ext           Boundary(alias, label, ?type, ?tags, $link)           Enterprise_Boundary(alias, label, ?tags, $link)           System_Boundary                           Container图            Import: !include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/**C4_Container.puml**       Additional Macros:                    Container(alias, label, *techn, ?descr, ?sprite, ?tags, $link)           ContainerDb           ContainerQueue           Container_Ext           ContainerDb_Ext           ContainerQueue_Ext           Container_Boundary(alias, label, ?tags, $link)                           Component图            Import: !include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/**C4_Component.puml**       附加宏:                    Component(alias, label, *techn, ?descr, ?sprite, ?tags, $link)           ComponentDb           ComponentQueue           Component_Ext           ComponentDb_Ext           ComponentQueue_Ext                           动态图            Import: !include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/**C4_Dynamic.puml**       附加宏:                    RelIndex(index, from, to, label, ?tags, $link)           (lowercase) increment($offset=1): 增加当前索引（没有直接输出的程序）           (lowercase) setIndex($new_index): 设置新索引（没有直接输出的过程）           LastIndex(): 返回最后使用的索引（可以用作参数的函数）                   以下 2 个宏需要 V1.2020.24Beta4（已经可以使用 https:www.plantuml.complantuml 进行测试）                     Index($offset=1): 返回当前索引并计算下一个索引（可用作参数的函数）           SetIndex($new_index): 返回新的集合索引并计算下一个索引（可用作参数的函数）                           部署图                     Import: !include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/**C4_Deployment.puml**               附加宏:                    Deployment_Node(alias, label, ?type, ?descr, ?sprite, ?tags, $link)           Node(alias, label, ?type, ?descr, ?sprite, ?tags, $link): Deployment_Node() 的简称           Node_L(alias, label, ?type, ?descr, ?sprite, ?tags, $link): Node()-左对齐           Node_R(alias, label, ?type, ?descr, ?sprite, ?tags, $link): Node()-右对齐                           查看每个 C4 模型图示例。   关系类型      Rel(from, to, label, ?techn, ?descr, ?sprite, ?tags, $link)   BiRel (双向关系)   您可以使用以下方法强制关系的方向：      Rel_U, Rel_Up   Rel_D, Rel_Down   Rel_L, Rel_Left   Rel_R, Rel_Right   关系对应的 sprites 通常较小，因此以下设置可选:     使用较小的图标（如以下示例中的三角形）   使用额外的比例因子（直接作为参数的一部分，或通过变量）   如果 sprite 参数以 &amp; 开头，也可以使用 OpenIconic 名称（详情参见 https:useiconic.comopen）   @startuml !include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml  Person(user, \"User\") Person(user1, \"User 1\") Person(user2, \"User 2\") Person(user3, \"User 3\")  System(system, \"System\")  ' normal sprites are too big  Rel_L(user, user2, \"informs\", \"courier\", \"normal sprites are too big\", $sprite=\"person2\")  ' scaled sprites are ok Rel_R(user, user3, \"informs\", \"courier\", \"scaled sprites are OK\", $sprite=\"person2,scale=0.5\")  ' combine sprite and scale to a new sprite !$combinedSprite=\"person2,scale=0.5\" Rel_R(user, user3, \"informs\", \"courier\", \"combined sprites are OK\", $sprite=$combinedSprite)   ' special smaller sprites can be used sprite $triangle {     00000000000     00000F00000     0000FBF0000     0000FBF0000     000F999F000     000F999F000     00F66666F00     00F66666F00     0F3333333F0     0F3333333F0     0FFFFFFFFF0     00000000000 } Rel_R(user1, system, \"orders\", \"http\", \"small sprites, like the small triangle\", $sprite=\"triangle\")  ' if sprite starts with &amp;, sprite defines a OpenIconic, details see https://useiconic.com/open/ Rel_D(user, user1, \"requests\", \"async message\", \"if sprite starts with &amp;, it defines a OpenIconic like &amp;envelope-closed\", $sprite = \"&amp;envelope-closed\") @enduml      在极少数情况下，您可以使用以下方法强制没有关系的对象的布局：     Lay_U(from, to)   Lay_D(from, to)   Lay_L(from, to)   Lay_R(from, to)   在以下示例中，一个人使用不同的系统，以及没有关系的一组人   @startuml !include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml HIDE_STEREOTYPE()  Person(a, \"A\") Person(b, \"B\") Person(c, \"C\") Person(d, \"D\") Person(e, \"E\")  Lay_U(a, b) Lay_R(a, c) Lay_D(a, d) Lay_L(a, e)  Person(x, \"X\") System(s1, \"S1\") System(s2, \"S2\") System(s3, \"S3\") System(s4, \"S4\")  Rel_U(x, s1, \"uses\") Rel_R(x, s2, \"uses\") Rel_D(x, s3, \"uses\") Rel_L(x, s4, \"uses\") @enduml      （结合 SHOW_FLOATING_LEGEND()）元素和例如可能需要所有的浮动图例，例如可以到达绘图区域的角落。      Lay_Distance(from, to, ?distance): 使用向下对齐设置 from 和 to 之间的距离（Lay_Distance(from,to,0) 等于 Lay_D(from, to)）。浮动图例的默认别名是 LEGEND()。   在以下示例中，浮动图例应位于图形的左下角。 （正常的 SHOW_LEGEND() 调用不需要额外的 Lay_Distance() 调用，图例会自动绘制在右侧图表下方）   @startuml !include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml  !define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons !define FONTAWESOME https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/font-awesome-5 !include DEVICONS/angular.puml !include DEVICONS/java.puml !include DEVICONS/msql_server.puml !include FONTAWESOME/users.puml  Person(user, \"Customer\", \"People that need products\", $sprite=\"users\") Container(spa, \"SPA\", \"angular\", \"The main interface that the customer interacts with\", $sprite=\"angular\") Container(api, \"API\", \"java\", \"Handles all business logic\", $sprite=\"java\") ContainerDb(db, \"Database\", \"Microsoft SQL\", \"Holds product, order and invoice information\", $sprite=\"msql_server\")  Rel(user, spa, \"Uses\") Rel(spa, api, \"Uses\") Rel_R(api, db, \"Reads/Writes\")  SHOW_FLOATING_LEGEND() Lay_Distance(LEGEND(), db, 1) @enduml      布局选项   C4-PlantUML 还带有一些布局选项，使创建漂亮有用的图表变得容易和可重用：      LAYOUT_TOP_DOWN() or LAYOUT_LEFT_RIGHT() or LAYOUT_LANDSCAPE()   LAYOUT_WITH_LEGEND() or SHOW_LEGEND(?hideStereotype)   SHOW_FLOATING_LEGEND(?alias, ?hideStereotype) and LEGEND()   LAYOUT_AS_SKETCH()   HIDE_STEREOTYPE()   C4-PlantUML 还带有一些 person sprite/portrait 选项:      HIDE_PERSON_SPRITE()   SHOW_PERSON_SPRITE(?sprite)   SHOW_PERSON_PORTRAIT()   SHOW_PERSON_OUTLINE() (requires PlantUML version &gt;= 1.2021.4)   Custom tags/stereotypes 支持和皮肤参数更新   可以将附加标签构造型添加到现有元素构造型（组件、…）和突出显示、…特定方面：      AddElementTag(tagStereo, ?bgColor, ?fontColor, ?borderColor, ?shadowing, ?shape, ?sprite, ?techn, ?legendText, ?legendSprite): Introduces a new element tag. The styles of the tagged elements are updated and the tag is displayed in the calculated legend.   AddRelTag(tagStereo, ?textColor, ?lineColor, ?lineStyle, ?sprite, ?techn, ?legendText, ?legendSprite): Introduces a new relation tag. The styles of the tagged relations are updated and the tag is displayed in the calculated legend.   UpdateElementStyle(elementName, ?bgColor, ?fontColor, ?borderColor, ?shadowing, ?shape, ?sprite, ?techn, ?legendText, ?legendSprite): This call updates the default style of the elements (component, …) and creates no additional legend entry.   UpdateRelStyle(textColor, lineColor): This call updates the default relationship colors and creates no additional legend entry.   RoundedBoxShape(): This call returns the name of the rounded box shape and can be used as ?shape argument.   EightSidedShape(): This call returns the name of the eight sided shape and can be used as ?shape argument.   DashedLine(): This call returns the name of the dashed line and can be used as ?lineStyle argument.   DottedLine(): This call returns the name of the dotted line and can be used as ?lineStyle argument.   BoldLine(): This call returns the name of the bold line and can be used as ?lineStyle argument.   Each element can be extended with one or multiple custom tags via the keyword argument $tags=\"...\", like Container(spaAdmin, \"Admin SPA\", $tags=\"v1.1\"). Multiple tags can be combined with +, like Container(api, \"API\", $tags=\"v1.0+v1.1\").   Element specific tag definitions   Sometimes an added element tag is element specific and all element specific colors should be used, e.g. a specific user role should be defined as element tag with the specific colors ...PERSON_... like  AddElementTag(\"admin\", $fontColor=$ELEMENT_FONT_COLOR, $bgColor=$PERSON_BG_COLOR, $borderColor=$PERSON_BORDER_COLOR, $sprite=\"osa_user_audit\", $legendText=\"administration user\")  Therefore element Add…Tag() shortcuts are added which use the specific colors as default values and the call can be simplified like  AddPersonTag(\"admin\", $sprite=\"osa_user_audit\", $legendText=\"administration user\")   Following calls introduces new element tags with element specific default colors:     AddPersonTag(tagStereo, ?bgColor, ?fontColor, ?borderColor, ?shadowing, ?shape, ?sprite, ?legendText, ?legendSprite)   AddExternalPersonTag(tagStereo, ?bgColor, ?fontColor, ?borderColor, ?shadowing, ?shape, ?sprite, ?legendText, ?legendSprite)   AddSystemTag(tagStereo, ?bgColor, ?fontColor, ?borderColor, ?shadowing, ?shape, ?sprite, ?legendText, ?legendSprite)   AddExternalSystemTag(tagStereo, ?bgColor, ?fontColor, ?borderColor, ?shadowing, ?shape, ?sprite, ?legendText, ?legendSprite)   AddComponentTag(tagStereo, ?bgColor, ?fontColor, ?borderColor, ?shadowing, ?shape, ?sprite, ?techn, ?legendText, ?legendSprite)   AddExternalComponentTag(tagStereo, ?bgColor, ?fontColor, ?borderColor, ?shadowing, ?shape, ?sprite, ?techn, ?legendText, ?legendSprite)   AddContainerTag(tagStereo, ?bgColor, ?fontColor, ?borderColor, ?shadowing, ?shape, ?sprite, ?techn, ?legendText, ?legendSprite)   AddExternalContainerTag(tagStereo, ?bgColor, ?fontColor, ?borderColor, ?shadowing, ?shape, ?techn, ?sprite, ?legendText, ?legendSprite)   AddNodeTag(tagStereo, ?bgColor, ?fontColor, ?borderColor, ?shadowing, ?shape, ?sprite, ?techn, ?legendText, ?legendSprite) (node specific: $type reuses $techn definition of $tags)   Comments      SHOW_LEGEND() supports the customized stereotypes     (LAYOUT_WITH_LEGEND() cannot be used, if the custom tags/stereotypes should be displayed in the legend).   SHOW_LEGEND() has to be last line in diagram.   Don’t use space between $tags and = (PlantUML does not support it).   Don’t use , as part of the tag names (PlantUML does not support it in combination with keyword arguments).   If 2 tags defines the same skinparam, the first definition is used.        If specific skinparams have to be merged (e.g. 2 tags change the font color) an additional combined tag has to be defined. Use &amp; as part of combined tag names.       Colors of relationship tags cannot be automatically merged (PlantUML does not support it). If one tag modifies the line color and the other the text color, an additional combined tag has to be defined and used.   Sample with different tag combinations   @startuml !include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml  UpdateElementStyle(person, $fontColor=\"green\") AddElementTag(\"v1.0\", $fontColor=\"#d73027\", $borderColor=\"#d73027\") AddElementTag(\"v1.1\", $fontColor=\"#ffffbf\", $borderColor=\"#ffffbf\") AddElementTag(\"v1.0&amp;v1.1\", $fontColor=\"#fdae61\", $borderColor=\"#fdae61\") AddElementTag(\"fallback\", $bgColor=\"#444444\")  AddElementTag(\"micro service\", $shape=EightSidedShape()) AddElementTag(\"storage\", $shape=RoundedBoxShape())  UpdateRelStyle(black, black) AddRelTag(\"service1\", $textColor=\"red\") AddRelTag(\"service2\", $lineColor=\"red\") AddRelTag(\"service1&amp;service2\", $textColor=\"red\", $lineColor=\"red\")  Container(spa, \"SPA\", \"angular\", \"The main interface that the customer interacts with via v1.0\", $tags=\"v1.0\") Container(spaAdmin, \"Admin SPA\", \"angular\", \"The administrator interface that the customer interacts with via new v1.1\", $tags=\"v1.1\") Container(api, \"API\", \"java\", \"Handles all business logic (incl. new v1.1 extensions)\", $tags=\"v1.0&amp;v1.1+v1.0+v1.1\") Container(spa2, \"SPA2\", \"angular\", \"The main interface that the customer interacts with via v1.0\", $tags=\"v1.0+fallback\") Container(spaAdmin2, \"Admin SPA2\", \"angular\", \"The administrator interface that the customer interacts with via new v1.1\", $tags=\"fallback+v1.1\")  Container(services, \"Services\", \"techn\", $tags=\"micro service\") Container(fileStorage, \"File storage\", \"techn\", $tags=\"storage\")  Rel(spa, api, \"Uses\", \"https\") Rel(spaAdmin, api, \"Uses\", \"https\") Rel_L(spa, spa2, \"Updates\", \"https\") Rel_R(spaAdmin, spaAdmin2, \"Updates\", \"https\")  Rel_D(api, services, \"uses service1 via this call\", $tags=\"service1\") Rel_D(api, services, \"uses service2 via this call\", $tags=\"service2\") Rel_D(services, fileStorage, \"both services stores via this call\", $tags=\"service1&amp;service2+service1+service2\")  SHOW_LEGEND(false) @enduml      Sample with tag dependent sprites and custom legend text   @startuml !include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml  !define osaPuml https://raw.githubusercontent.com/Crashedmind/PlantUML-opensecurityarchitecture2-icons/master !include osaPuml/Common.puml !include osaPuml/User/all.puml  !include &lt;office/Servers/database_server&gt; !include &lt;office/Servers/file_server&gt; !include &lt;office/Servers/application_server&gt; !include &lt;office/Concepts/service_application&gt; !include &lt;office/Concepts/firewall&gt;  AddExternalPersonTag(\"anonymous_ext\", $sprite=\"osa_user_black_hat\", $legendText=\"anonymous user\") AddPersonTag(\"customer\", $sprite=\"osa_user_large_group\", $legendText=\"aggregated user\") AddPersonTag(\"admin\", $sprite=\"osa_user_audit,color=red\", $legendSprite=\"osa_user_audit,scale=0.25,color=red\", $legendText=\"administration user\")  AddContainerTag(\"webApp\", $sprite=\"application_server\", $legendText=\"web app container\") AddContainerTag(\"db\", $sprite=\"database_server\", $legendText=\"database container\") AddContainerTag(\"files\", $sprite=\"file_server\", $legendText=\"file server container\") AddContainerTag(\"conApp\", $sprite=\"service_application\", $legendText=\"console app container\")  AddRelTag(\"firewall\", $textColor=\"$ARROW_COLOR\", $lineColor=\"$ARROW_COLOR\", $sprite=\"firewall,scale=0.3,color=red\", $legendText=\"firewall\")  Person_Ext(anonymous_user, \"Bob\", $tags=\"anonymous_ext\") Person(aggregated_user, \"Sam, Ivone\", $tags=\"customer\") Person(administration_user, \"Bernd\", $tags=\"admin\")  System_Boundary(c1, \"techtribes.js\"){     Container(web_app, \"Web Application\", \"Java, Spring MVC, Tomcat 7.x\", $tags=\"webApp\")     ContainerDb(rel_db, \"Relational Database\", \"MySQL 5.5.x\", $tags=\"db\")     Container(filesystem, \"File System\", \"FAT32\", $tags=\"files\")     ContainerDb(nosql, \"NoSQL Data Store\", \"MongoDB 2.2.x\", $tags=\"db\")     Container(updater, \"Updater\", \"Java 7 Console App\", $tags=\"conApp\") }  Rel(anonymous_user, web_app, \"Uses\", \"HTTPS\", $tags=\"firewall\") Rel(aggregated_user, web_app, \"Uses\", \"HTTPS\", $tags=\"firewall\") Rel(administration_user, web_app, \"Uses\", \"HTTPS\", $tags=\"firewall\")  Rel(web_app, rel_db, \"Reads from and writes to\", \"SQL/JDBC, port 3306\") Rel(web_app, filesystem, \"Reads from\") Rel(web_app, nosql, \"Reads from\", \"MongoDB wire protocol, port 27017\")  Rel_U(updater, rel_db, \"Reads from and writes data to\", \"SQL/JDBC, port 3306\") Rel_U(updater, filesystem, \"Writes to\") Rel_U(updater, nosql, \"Reads from and writes to\", \"MongoDB wire protocol, port 27017\")  Lay_R(rel_db, filesystem)  SHOW_LEGEND() @enduml      Custom schema definition   If the custom (color) schema is defined via UpdateElementStyle() then the legend of existing elements is updated too.   @startuml !include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml  !$COLOR_A_5 = \"#7f3b08\" !$COLOR_A_4 = \"#b35806\" !$COLOR_A_3 = \"#e08214\" !$COLOR_A_2 = \"#fdb863\" !$COLOR_A_1 = \"#fee0b6\" !$COLOR_NEUTRAL = \"#f7f7f7\" !$COLOR_B_1 = \"#d8daeb\" !$COLOR_B_2 = \"#b2abd2\" !$COLOR_B_3 = \"#8073ac\" !$COLOR_B_4 = \"#542788\" !$COLOR_B_5 = \"#2d004b\" !$COLOR_REL_LINE = \"#8073ac\" !$COLOR_REL_TEXT = \"#8073ac\"  UpdateElementStyle(\"person\", $bgColor=$COLOR_A_5, $fontColor=$COLOR_NEUTRAL, $borderColor=$COLOR_A_1, $shadowing=\"true\") UpdateElementStyle(\"external_person\", $bgColor=$COLOR_B_5, $fontColor=$COLOR_NEUTRAL, $borderColor=$COLOR_B_1) UpdateElementStyle(\"system\", $bgColor=$COLOR_A_4, $fontColor=$COLOR_NEUTRAL, $borderColor=$COLOR_A_2) UpdateElementStyle(\"external_system\", $bgColor=$COLOR_B_4, $fontColor=$COLOR_NEUTRAL, $borderColor=$COLOR_B_2) UpdateRelStyle($lineColor=$COLOR_REL_LINE, $textColor=$COLOR_REL_TEXT)  Person(customer, \"Personal Banking Customer\") System(banking_system, \"Internet Banking System\")  System_Ext(mail_system, \"E-mail system\") System_Ext(mainframe, \"Mainframe Banking System\")  Rel(customer, banking_system, \"Uses\") Rel_Back(customer, mail_system, \"Sends e-mails to\") Rel_Neighbor(banking_system, mail_system, \"Sends e-mails\") Rel(banking_system, mainframe, \"Uses\")  SHOW_LEGEND() @enduml      Element properties   A model can be extended with (a table of) properties that concrete deployments or more detailed concepts can be documented:      SetPropertyHeader(col1Name, col2Name, ?col3Name, ?col4Name) The properties table can have up to 4 columns. The default header uses the column names “Name”, “Description”.   WithoutPropertyHeader() If no header is used, then the second column is bold.   AddProperty(col1, col2, ?col3, ?col4) (All columns of) a property which will be added to the next element.   Following sample uses all 3 different property definitions (and the aligned deployment node).   @startuml !include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Deployment.puml  ' default header Property, Value AddProperty(\"Name\", \"Flash\") AddProperty(\"Organization\", \"Zootopia\") AddProperty(\"Tool\", \"Internet Explorer 7.0\") Person(personAlias, \"Label\", \"Optional Description (with default property header)\")  SetPropertyHeader(\"Property\",\"Value\", \"Description\") AddProperty(\"Prop1\", \"Value1\", \"Details1\") AddProperty(\"Prop2\", \"Value2\", \"Details2\") Deployment_Node_L(nodeAlias, \"Label\", \"Optional Type\", \"Optional Description (with custom property header)\") {    WithoutPropertyHeader()   AddProperty(\"PropC1\", \"ValueC1\")   AddProperty(\"PropC2\", \"ValueC2\")   Container(containerAlias, \"Label\", \"Technology\", \"Optional Description (without property header)\") }  System(systemAlias, \"Label\", \"Optional Description (without properties)\")  Rel(personAlias, containerAlias, \"Label\", \"Optional Technology\") @enduml      Version information   C4-PlantUML offers version information like PlantUML with its %version() call.      C4Version(): Current C4-PlantUML version (e.g. 2.4.0beta1).   C4VersionDetails(): (Floating) version details with the current PlantUML and C4-PlantUML version. (It can be referenced via the alias C4VersionDetailsArea.)   @startuml !include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml  ' existing plantuml version as text %version()  ' new C4-Plantuml version as text  C4Version()  ' new C4-Plantuml version details (incl. PlantUML version) as table C4VersionDetails()  ' version functions used in e.g. footer footer drawn with PlantUML v. %version() and C4-PlantUML v. C4Version() @enduml      Snippets for Visual Studio Code   Because the PlantUML support inside of Visual Studio Code is excellent with the PlantUML extension, you can also find VS Code snippets for C4-PlantUML at .vscode/C4.code-snippets.   Project level snippets are now supported in VSCode 1.28. Just include the C4.code-snippets file in the .vscode folder of your project.   It is possible to save them directly inside VS Code: Creating your own snippets.      Live Templates for IntelliJ   Prerequisites  Graphviz download  PlantUML Integration   Install      Download IntelliJ live template.   Select File | Manage IDE Settings | Import Settings from the IntelliJ IDEA menu.   Specify the path to the downloaded ZIP file: c4_live_template.zip.   In the Import Settings dialog, select the Live templates checkbox and click OK.   Restart IntelliJ.   Usage      Create new PlantUML file (.puml).   Type c4_ for displaying artifacts templates for C4-PlantUML   Live template create correct C4 model artifact with stubbed arguments.            E.g. alias, label, type, technology, description           Replace stubbed arguments with desired values.       Layout Options   C4-PlantUML also comes with some layout options to make it easy and reuseable to create nice and useful diagrams:      LAYOUT_TOP_DOWN or LAYOUT_LEFT_RIGHT   LAYOUT_WITH_LEGEND   LAYOUT_AS_SKETCH   Advanced Samples   The following advanced samples are reproductions with C4-PlantUML from official C4 model samples created by Simon Brown.   The core diagram samples from c4model.com are available here.   techtribes.js   Source: C4_Container Diagram Sample - techtribesjs.puml      Message Bus and Microservices   Source: C4_Container Diagram Sample - message bus.puml      Background   PlantUML is an open source project that allows you to create UML diagrams. Diagrams are defined using a simple and intuitive language. Images can be generated in PNG, in SVG or in LaTeX format.   PlantUML was created to allow the drawing of UML diagrams, using a simple and human readable text description. Because it does not prevent you from drawing inconsistent diagrams, it is a drawing tool and not a modeling tool. It is the most used text-based diagram drawing tool with extensive support into wikis and forums, text editors and IDEs, use by different programming languages and documentation generators.   The C4 model for software architecture is an “abstraction-first” approach to diagramming, based upon abstractions that reflect how software architects and developers think about and build software. The small set of abstractions and diagram types makes the C4 model easy to learn and use. C4 stands for context, containers, components, and code — a set of hierarchical diagrams that you can use to describe your software architecture at different zoom levels, each useful for different audiences.   The C4 model was created as a way to help software development teams describe and communicate software architecture, both during up-front design sessions and when retrospectively documenting an existing codebase.   More information can be found here:      The C4 model for software architecture   REAL WORLD PlantUML - Sample Gallery   Visualising and documenting software architecture cheat sheets   PlantUML and Structurizr - Create models not diagrams   License   This project is licensed under the MIT License - see the LICENSE file for details  ","categories": ["UML"],
        "tags": ["UML","C4"],
        "url": "/jekyll-blog/uml/plantUML-for-C4-model%E6%B1%89%E5%8C%96/",
        "teaser": "/jekyll-blog/assets/images/tease.jpg"
      }]
